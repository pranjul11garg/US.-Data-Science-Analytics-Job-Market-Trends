{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"EDA\"\n",
        "format: html\n",
        "execute:\n",
        "  working-directory: project\n",
        "---"
      ],
      "id": "8df7c88c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "#eda = pd.read_csv(/data/eda_data.csv')\n",
        "eda = pd.read_csv(\"data/eda_data.csv\")\n",
        "eda.head()"
      ],
      "id": "69a15149",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import os\n",
        "print(\"Current working directory:\", os.getcwd())\n",
        "print(\"Files in data/:\", os.listdir(\"./data\"))"
      ],
      "id": "58bdf270",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "eda = pd.read_csv('./data/eda_data.csv')\n",
        "#eda = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n",
        "eda.head(10)"
      ],
      "id": "ac31e883",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# identifying data analyst jobs by keyword searching\n",
        "keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n",
        "            'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n",
        "            'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n",
        "            'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n",
        "\n",
        "match = lambda col: eda[col].str.contains('|'.join(keywords), case=False, na=False)\n",
        "\n",
        "eda['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n",
        "             | match('SKILLS_NAME') \\\n",
        "             | match('SPECIALIZED_SKILLS_NAME') \n",
        "eda['DATA_ANALYST_JOB'].value_counts()"
      ],
      "id": "9846eb72",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Group data (same as before)\n",
        "df_grouped = eda.groupby(['DATA_ANALYST_JOB', 'NAICS2_NAME']).size().reset_index(name='Job_Count')\n",
        "\n",
        "# Shorten the industry names (NAICS2_NAME) for better readability\n",
        "# Assuming NAICS2_NAME has long names, we'll map them to shorter versions\n",
        "# Example: Replace long names with abbreviations or shorter terms\n",
        "industry_short_names = {\n",
        "    'Professional, Scientific, and Technical Services': 'Prof. Services',\n",
        "    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n",
        "    'Health Care and Social Assistance': 'Healthcare',\n",
        "    'Finance and Insurance': 'Finance',\n",
        "    'Information': 'Info Tech',\n",
        "    'Educational Services': 'Education',\n",
        "    'Manufacturing': 'Manufacturing',\n",
        "    'Retail Trade': 'Retail',\n",
        "    'Accommodation and Food Services': 'Hospitality',\n",
        "    'Other Services (except Public Administration)': 'Other Services',\n",
        "    # Add more mappings as needed based on your dataset\n",
        "}\n",
        "\n",
        "# Apply the shortened names to the dataframe\n",
        "df_grouped['NAICS2_NAME_SHORT'] = df_grouped['NAICS2_NAME'].map(industry_short_names).fillna(df_grouped['NAICS2_NAME'])\n",
        "\n",
        "# Define a vibrant and modern color palette\n",
        "color_map = {\n",
        "    False: \"#FF6B6B\",  # Coral red for False\n",
        "    True: \"#4ECDC4\"    # Teal for True\n",
        "}\n",
        "\n",
        "# Create the bar plot with Plotly Express\n",
        "fig = px.bar(df_grouped, \n",
        "             x='NAICS2_NAME_SHORT',  # Use shortened names\n",
        "             y='Job_Count',\n",
        "             color='DATA_ANALYST_JOB',\n",
        "             title=\"Data & Business Analytics Job Trends\",\n",
        "             labels={'NAICS2_NAME_SHORT': 'Industry', 'Job_Count': 'Number of Jobs'},\n",
        "             barmode='group',\n",
        "             color_discrete_map=color_map\n",
        "            )\n",
        "\n",
        "# Beautify the layout with a modern, clean design\n",
        "fig.update_layout(\n",
        "    # Sizing and margins\n",
        "    autosize=True,\n",
        "    width=1100,  # Slightly narrower for better focus\n",
        "    height=650,  # Adjusted height\n",
        "    margin=dict(l=50, r=50, t=90, b=120),  # Adjusted margins for cleaner look\n",
        "\n",
        "    # Background and plot styling\n",
        "    plot_bgcolor='rgba(240, 240, 245, 1)',  # Softer gray background\n",
        "    paper_bgcolor='rgba(255, 255, 255, 1)',  # White paper background\n",
        "    font=dict(family=\"Helvetica, sans-serif\", size=14, color=\"#2D3748\"),  # Modern font\n",
        "\n",
        "    # Title styling\n",
        "    title=dict(\n",
        "        text=\"Data & Business Analytics Job Trends\",\n",
        "        font=dict(size=26, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n",
        "        x=0.5,  # Center the title\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "\n",
        "    # X-axis styling\n",
        "    xaxis=dict(\n",
        "        title=\"Industry\",\n",
        "        title_font=dict(size=18, color=\"#2D3748\"),\n",
        "        tickfont=dict(size=13, color=\"#4A5568\"),\n",
        "        tickangle=-30,  # Slightly less aggressive rotation\n",
        "        gridcolor=\"rgba(200, 200, 200, 0.2)\",  # Very light gridlines\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True\n",
        "    ),\n",
        "\n",
        "    # Y-axis styling\n",
        "    yaxis=dict(\n",
        "        title=\"Number of Jobs\",\n",
        "        title_font=dict(size=18, color=\"#2D3748\"),\n",
        "        tickfont=dict(size=13, color=\"#4A5568\"),\n",
        "        range=[0, df_grouped['Job_Count'].max() * 1.15],  # Slightly tighter range\n",
        "        gridcolor=\"rgba(200, 200, 200, 0.2)\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True\n",
        "    ),\n",
        "\n",
        "    # Legend styling\n",
        "    legend=dict(\n",
        "        title=\"Job Type\",\n",
        "        font=dict(size=13, color=\"#2D3748\"),\n",
        "        bgcolor=\"rgba(255, 255, 255, 0.95)\",\n",
        "        bordercolor=\"#2D3748\",\n",
        "        borderwidth=1,\n",
        "        x=1.02,  # Position outside\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "\n",
        "    # Hover and interactivity\n",
        "    hovermode=\"closest\",\n",
        "    hoverlabel=dict(\n",
        "        bgcolor=\"rgba(255, 255, 255, 0.9)\",\n",
        "        font_size=13,\n",
        "        font_family=\"Helvetica, sans-serif\",\n",
        "        font_color=\"#2D3748\",\n",
        "        bordercolor=\"#2D3748\"\n",
        "    ),\n",
        "\n",
        "    # Add a subtle shadow effect for depth\n",
        "    bargap=0.2,  # Add space between bars for clarity\n",
        ")\n",
        "\n",
        "# Customize the bars\n",
        "fig.update_traces(\n",
        "    marker=dict(\n",
        "        line=dict(width=1.2, color=\"#2D3748\"),  # Thinner border for elegance\n",
        "        # Add a gradient effect to the bars\n",
        "        coloraxis=None,\n",
        "    ),\n",
        "    opacity=0.85,  # Slight transparency for softness\n",
        "    text=df_grouped['Job_Count'],  # Add labels on bars\n",
        "    textposition='outside',  # Place labels outside for clarity\n",
        "    textfont=dict(size=12, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n",
        "    texttemplate='%{text}',  # Show just the number\n",
        ")\n",
        "\n",
        "# Add a subtle annotation for the highest job count\n",
        "max_job = df_grouped.loc[df_grouped['Job_Count'].idxmax()]\n",
        "fig.add_annotation(\n",
        "    x=max_job['NAICS2_NAME_SHORT'],\n",
        "    y=max_job['Job_Count'] * 1.1,\n",
        "    text=f\"Top: {max_job['NAICS2_NAME_SHORT']}<br>{max_job['Job_Count']} Jobs\",\n",
        "    showarrow=True,\n",
        "    arrowhead=1,\n",
        "    ax=20,\n",
        "    ay=-40,\n",
        "    font=dict(size=13, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n",
        "    bgcolor=\"rgba(255, 255, 255, 0.85)\",\n",
        "    bordercolor=\"#2D3748\",\n",
        "    borderwidth=1,\n",
        "    borderpad=4\n",
        ")\n"
      ],
      "id": "3d2391d5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"Columns in df_top_industries:\", df_top_industries.columns)\n",
        "print(\"First few rows of df_top_industries:\\n\", df_top_industries.head())"
      ],
      "id": "4094376d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Debug: Check df_grouped (optional, to ensure it has the right columns)\n",
        "print(\"Columns in df_grouped:\", df_grouped.columns)\n",
        "print(\"First few rows of df_grouped:\\n\", df_grouped.head())\n",
        "\n",
        "# Identify the top 10 industries with the most data analyst jobs\n",
        "top_industries = df_grouped.groupby(\"NAICS2_NAME\")[\"Job_Count\"].sum().nlargest(10).index\n",
        "print(\"Top industries:\", top_industries)\n",
        "\n",
        "# Filter the dataset for top industries\n",
        "df_top_industries = df_grouped[df_grouped[\"NAICS2_NAME\"].isin(top_industries)].copy()\n",
        "\n",
        "# Reset the index to start from 0\n",
        "df_top_industries = df_top_industries.reset_index(drop=True)\n",
        "\n",
        "# Shorten industry names for better readability\n",
        "industry_short_names = {\n",
        "    'Professional, Scientific, and Technical Services': 'Prof. Services',\n",
        "    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n",
        "    'Health Care and Social Assistance': 'Healthcare',\n",
        "    'Finance and Insurance': 'Finance',\n",
        "    'Information': 'Info Tech',\n",
        "    'Educational Services': 'Education',\n",
        "    'Manufacturing': 'Manufacturing',\n",
        "    'Retail Trade': 'Retail',\n",
        "    'Accommodation and Food Services': 'Hospitality',\n",
        "    'Other Services (except Public Administration)': 'Other Services',\n",
        "}\n",
        "df_top_industries['NAICS2_NAME_SHORT'] = df_top_industries['NAICS2_NAME'].map(industry_short_names).fillna(df_top_industries['NAICS2_NAME'])\n",
        "\n",
        "# Map DATA_ANALYST_JOB to True/False for the legend\n",
        "df_top_industries['Job_Type'] = df_top_industries['DATA_ANALYST_JOB'].map({True: 'True', False: 'False'})\n",
        "\n",
        "# Debug: Check the final DataFrame\n",
        "print(\"Columns in df_top_industries:\", df_top_industries.columns)\n",
        "print(\"First few rows of df_top_industries:\\n\", df_top_industries.head())\n",
        "\n",
        "# Define a gradient color palette for True/False\n",
        "color_palette = {\n",
        "    'True': ['#FF6B6B', '#FF8787'],  # Coral Red gradient\n",
        "    'False': ['#4ECDC4', '#6BE6DE']  # Teal gradient\n",
        "}\n",
        "\n",
        "# Create the bar chart\n",
        "fig = px.bar(df_top_industries, \n",
        "             x=\"NAICS2_NAME_SHORT\", \n",
        "             y=\"Job_Count\", \n",
        "             color=\"Job_Type\",\n",
        "             title=\"Top 10 Industries Hiring Data & Business Analysts\",\n",
        "             labels={'NAICS2_NAME_SHORT': 'Industry', 'Job_Count': 'Number of Jobs', 'Job_Type': 'Job Type'},\n",
        "             barmode='group')\n",
        "\n",
        "# Beautify the layout with advanced styling\n",
        "fig.update_layout(\n",
        "    # Sizing and margins\n",
        "    autosize=True,\n",
        "    width=1200,\n",
        "    height=700,\n",
        "    margin=dict(l=60, r=150, t=120, b=100),\n",
        "\n",
        "    # Background with gradient\n",
        "    plot_bgcolor='rgba(0,0,0,0)',\n",
        "    paper_bgcolor='rgba(0,0,0,0)',\n",
        "    shapes=[\n",
        "        dict(\n",
        "            type=\"rect\",\n",
        "            x0=0, y0=0, x1=1, y1=1,\n",
        "            xref=\"paper\", yref=\"paper\",\n",
        "            fillcolor=\"linear-gradient(135deg, #E6E9FF 0%, #F5F5FA 100%)\",\n",
        "            line=dict(width=0),\n",
        "            layer=\"below\"\n",
        "        )\n",
        "    ],\n",
        "\n",
        "    # Font styling\n",
        "    font=dict(family=\"Inter, sans-serif\", size=14, color=\"#1A202C\"),\n",
        "\n",
        "    # Title styling with shadow\n",
        "    title=dict(\n",
        "        text=\"Top 10 Industries Hiring Data & Business Analysts\",\n",
        "        font=dict(size=30, color=\"#1A202C\", family=\"Inter, sans-serif\"),\n",
        "        x=0.5,\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "\n",
        "    # X-axis styling\n",
        "    xaxis=dict(\n",
        "        title=\"Industry\",\n",
        "        title_font=dict(size=18, color=\"#1A202C\"),\n",
        "        tickfont=dict(size=14, color=\"#4A5568\"),\n",
        "        tickangle=45,\n",
        "        gridcolor=\"rgba(200, 200, 200, 0.2)\",\n",
        "        linecolor=\"#1A202C\",\n",
        "        linewidth=2,\n",
        "        showline=True\n",
        "    ),\n",
        "\n",
        "    # Y-axis styling\n",
        "    yaxis=dict(\n",
        "        title=\"Number of Jobs\",\n",
        "        title_font=dict(size=18, color=\"#1A202C\"),\n",
        "        tickfont=dict(size=14, color=\"#4A5568\"),\n",
        "        range=[0, df_top_industries.groupby('NAICS2_NAME_SHORT')['Job_Count'].sum().max() * 1.2],\n",
        "        gridcolor=\"rgba(200, 200, 200, 0.3)\",\n",
        "        linecolor=\"#1A202C\",\n",
        "        linewidth=2,\n",
        "        showline=True,\n",
        "        showgrid=True,\n",
        "        gridwidth=1,\n",
        "        zeroline=False\n",
        "    ),\n",
        "\n",
        "    # Legend styling\n",
        "    legend=dict(\n",
        "        title=\"Job Type\",\n",
        "        font=dict(size=13, color=\"#1A202C\"),\n",
        "        bgcolor=\"rgba(255, 255, 255, 0.95)\",\n",
        "        bordercolor=\"#1A202C\",\n",
        "        borderwidth=1,\n",
        "        x=1.02,\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "\n",
        "    # Hover and interactivity\n",
        "    hovermode=\"closest\",\n",
        "    hoverlabel=dict(\n",
        "        bgcolor=\"rgba(255, 255, 255, 0.95)\",\n",
        "        font_size=13,\n",
        "        font_family=\"Inter, sans-serif\",\n",
        "        font_color=\"#1A202C\",\n",
        "        bordercolor=\"#1A202C\",\n",
        "        align=\"left\"\n",
        "    ),\n",
        "\n",
        "    # Bar spacing\n",
        "    bargap=0.25,\n",
        "\n",
        "    # Animation for bar loading\n",
        "    transition=dict(duration=800, easing=\"cubic-in-out\"),\n",
        "    updatemenus=[\n",
        "        dict(\n",
        "            buttons=[\n",
        "                dict(\n",
        "                    label=\"All Industries\",\n",
        "                    method=\"update\",\n",
        "                    args=[{\"visible\": [True] * len(fig.data)},\n",
        "                          {\"title\": \"Top 10 Industries Hiring Data & Business Analysts\"}]\n",
        "                )\n",
        "            ] + [\n",
        "                dict(\n",
        "                    label=industry,\n",
        "                    method=\"update\",\n",
        "                    args=[\n",
        "                        {\"visible\": [df_top_industries['NAICS2_NAME_SHORT'][i] == industry for i in range(len(df_top_industries))]},\n",
        "                        {\"title\": f\"Jobs in {industry}\"}\n",
        "                    ]\n",
        "                ) for industry in df_top_industries['NAICS2_NAME_SHORT'].unique()\n",
        "            ],\n",
        "            direction=\"down\",\n",
        "            showactive=True,\n",
        "            x=0.1,\n",
        "            xanchor=\"left\",\n",
        "            y=1.1,\n",
        "            yanchor=\"top\"\n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Customize the bars with gradients and hover effects\n",
        "for trace in fig.data:\n",
        "    job_type = trace.name\n",
        "    trace.marker = dict(\n",
        "        color=color_palette[job_type][0],\n",
        "        colorscale=[[0, color_palette[job_type][0]], [1, color_palette[job_type][1]]],\n",
        "        line=dict(width=1, color=\"#1A202C\"),\n",
        "        opacity=0.85\n",
        "    )\n",
        "    trace.hovertemplate = (\n",
        "        \"<b>%{x}</b><br>\" +\n",
        "        \"Type: %{fullData.name}<br>\" +\n",
        "        \"Jobs: %{y}<br>\" +\n",
        "        \"<extra></extra>\"\n",
        "    )\n",
        "    trace.update(\n",
        "        hoverinfo=\"text\",\n",
        "        marker=dict(opacity=1.0),\n",
        "        selector=dict(mode=\"markers\")\n",
        "    )\n",
        "\n",
        "# Add bar labels\n",
        "fig.update_traces(\n",
        "    texttemplate='%{y}',\n",
        "    textposition='outside',\n",
        "    textfont=dict(size=12, color=\"#1A202C\", family=\"Inter, sans-serif\"),\n",
        "    animation=dict(\n",
        "        frame=dict(duration=800, redraw=True),\n",
        "        fromcurrent=True,\n",
        "        transition=dict(duration=800, easing=\"cubic-in-out\")\n",
        "    )\n",
        ")\n",
        "\n",
        "# Add annotation for the highest job count\n",
        "max_job = df_top_industries.groupby('NAICS2_NAME_SHORT')['Job_Count'].sum().idxmax()\n",
        "max_count = df_top_industries.groupby('NAICS2_NAME_SHORT')['Job_Count'].sum().max()\n",
        "fig.add_annotation(\n",
        "    x=max_job,\n",
        "    y=max_count * 1.15,\n",
        "    text=f\"Top: {max_job}<br>{max_count} Jobs\",\n",
        "    showarrow=True,\n",
        "    arrowhead=1,\n",
        "    ax=20,\n",
        "    ay=-40,\n",
        "    font=dict(size=13, color=\"#1A202C\", family=\"Inter, sans-serif\"),\n",
        "    bgcolor=\"rgba(255, 255, 255, 0.95)\",\n",
        "    bordercolor=\"#1A202C\",\n",
        "    borderwidth=1,\n",
        "    borderpad=4\n",
        ")\n",
        "\n",
        "# Add shadow effect to the title\n",
        "fig.add_annotation(\n",
        "    x=0.5,\n",
        "    y=0.95,\n",
        "    xref=\"paper\",\n",
        "    yref=\"paper\",\n",
        "    text=\"Top 10 Industries Hiring Data & Business Analysts\",\n",
        "    showarrow=False,\n",
        "    font=dict(size=30, color=\"rgba(0, 0, 0, 0.05)\", family=\"Inter, sans-serif\"),\n",
        "    xanchor=\"center\",\n",
        "    yanchor=\"top\",\n",
        "    yshift=-2,\n",
        "    xshift=2\n",
        ")\n",
        "\n",
        "# Show the plot\n",
        "fig.show()\n",
        "\n",
        "# Save the plot\n",
        "#fig.write_html(\"interactive_industry_jobs_bar_chart.html\")"
      ],
      "id": "ce5c7432",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Define target industries\n",
        "target_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n",
        "\n",
        "# Filter the original DataFrame (df) instead of df_grouped\n",
        "df_remote = eda[eda[\"NAICS2_NAME\"].isin(target_industries)]\n",
        "\n",
        "# Count occurrences of each remote type in these industries\n",
        "df_remote_grouped = df_remote.groupby(\"REMOTE_TYPE_NAME\").size().reset_index(name=\"Count\")\n",
        "\n",
        "# Define a modern color palette\n",
        "color_map = {\n",
        "    \"Remote\": \"#6AB1E9\",  # Soft Sky Blue\n",
        "    \"On-Site\": \"#EF767A\",  # Soft Coral\n",
        "    \"Hybrid\": \"#49C6B7\"   # Teal-Green\n",
        "}\n",
        "\n",
        "# Create the pie chart\n",
        "fig = px.pie(df_remote_grouped, \n",
        "             names=\"REMOTE_TYPE_NAME\", \n",
        "             values=\"Count\", \n",
        "             title=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n",
        "             color=\"REMOTE_TYPE_NAME\", \n",
        "             color_discrete_map=color_map)\n",
        "\n",
        "# Beautify the layout\n",
        "fig.update_layout(\n",
        "    # Sizing and margins\n",
        "    autosize=True,\n",
        "    width=900,  # Compact width for pie charts\n",
        "    height=700,  # Taller height to accommodate title and legend\n",
        "    margin=dict(l=50, r=50, t=120, b=50),  # Adjusted margins for title\n",
        "\n",
        "    # Background styling\n",
        "    plot_bgcolor='rgba(240, 240, 245, 1)',  # Light gray background\n",
        "    paper_bgcolor='rgba(255, 255, 255, 1)',  # White paper background\n",
        "    font=dict(family=\"Poppins, sans-serif\", size=14, color=\"#2D3436\"),  # Modern font\n",
        "\n",
        "    # Title styling\n",
        "    title=dict(\n",
        "        text=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n",
        "        font=dict(size=24, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n",
        "        x=0.5,\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "\n",
        "    # Legend styling\n",
        "    legend=dict(\n",
        "        title=\"Remote Type\",\n",
        "        font=dict(size=13, color=\"#2D3436\"),\n",
        "        bgcolor=\"rgba(255, 255, 255, 0.95)\",\n",
        "        bordercolor=\"#2D3436\",\n",
        "        borderwidth=1,\n",
        "        x=1.05,  # Position outside\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "\n",
        "    # Hover and interactivity\n",
        "    hovermode=\"closest\",\n",
        "    hoverlabel=dict(\n",
        "        bgcolor=\"rgba(255, 255, 255, 0.9)\",\n",
        "        font_size=13,\n",
        "        font_family=\"Poppins, sans-serif\",\n",
        "        font_color=\"#2D3436\",\n",
        "        bordercolor=\"#2D3436\"\n",
        "    ),\n",
        "\n",
        "    # Add a subtle gradient background effect\n",
        "    shapes=[\n",
        "        dict(\n",
        "            type=\"rect\",\n",
        "            x0=0, y0=0, x1=1, y1=1,\n",
        "            xref=\"paper\", yref=\"paper\",\n",
        "            fillcolor=\"rgba(220, 221, 255, 0.2)\",  # Light gradient overlay\n",
        "            line=dict(width=0),\n",
        "            layer=\"below\"\n",
        "        )\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Customize the pie chart slices\n",
        "fig.update_traces(\n",
        "    # Add percentages and labels\n",
        "    textinfo=\"percent+label\",\n",
        "    textfont=dict(size=14, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n",
        "    textposition=\"inside\",  # Place labels inside for a cleaner look\n",
        "\n",
        "    # Add a subtle border to slices\n",
        "    marker=dict(\n",
        "        line=dict(color=\"#2D3436\", width=1.5)\n",
        "    ),\n",
        "\n",
        "    # Pull out the largest slice slightly for emphasis\n",
        "    pull=[0.1 if count == df_remote_grouped['Count'].max() else 0 for count in df_remote_grouped['Count']],\n",
        "\n",
        "    # Add a slight opacity for a softer look\n",
        "    opacity=0.9,\n",
        "\n",
        "    # Custom hover template\n",
        "    hovertemplate=\"<b>%{label}</b><br>Count: %{value}<br>Percentage: %{percent}<extra></extra>\",\n",
        "\n",
        "    # Add a rotation for better presentation\n",
        "    rotation=45,\n",
        "\n",
        "    # Add a subtle shadow effect to slices (simulated with opacity and border)\n",
        "    sort=False  # Keep the order as in the data\n",
        ")\n",
        "\n",
        "# Add an annotation for the largest slice\n",
        "max_slice = df_remote_grouped.loc[df_remote_grouped['Count'].idxmax()]\n",
        "fig.add_annotation(\n",
        "    x=0.5,\n",
        "    y=0.1,\n",
        "    xref=\"paper\",\n",
        "    yref=\"paper\",\n",
        "    text=f\"Dominant Type: {max_slice['REMOTE_TYPE_NAME']}<br>{max_slice['Count']} Jobs ({fig.data[0]['values'].tolist().index(max_slice['Count'])*100/sum(fig.data[0]['values']):.1f}%)\",\n",
        "    showarrow=False,\n",
        "    font=dict(size=13, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n",
        "    bgcolor=\"rgba(255, 255, 255, 0.9)\",\n",
        "    bordercolor=\"#2D3436\",\n",
        "    borderwidth=1,\n",
        "    borderpad=4\n",
        ")\n",
        "\n",
        "# Add a shadow effect to the title (simulated with a duplicate text)\n",
        "fig.add_annotation(\n",
        "    x=0.5,\n",
        "    y=0.95,\n",
        "    xref=\"paper\",\n",
        "    yref=\"paper\",\n",
        "    text=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n",
        "    showarrow=False,\n",
        "    font=dict(size=24, color=\"rgba(0, 0, 0, 0.05)\", family=\"Poppins, sans-serif\"),\n",
        "    xanchor=\"center\",\n",
        "    yanchor=\"top\",\n",
        "    yshift=-2,\n",
        "    xshift=2\n",
        ")\n"
      ],
      "id": "e097c10a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1) Trim out the 1–99th percentile so outliers don’t skew the means\n",
        "low, high = eda['SALARY'].quantile([0.01, 0.99])\n",
        "eda_trim = eda[(eda['SALARY'] >= low) & (eda['SALARY'] <= high)]\n",
        "\n",
        "# 2) Compute mean salary by remote type\n",
        "means = eda_trim.groupby('REMOTE_TYPE_NAME')['SALARY'].mean().loc[['Remote', 'Not Remote', 'Hybrid Remote']]\n",
        "\n",
        "# 3) Plot with value labels\n",
        "plt.figure(figsize=(10, 7))\n",
        "bars = means.plot.bar(color=['#4C72B0', '#55A868', '#C44E52'])\n",
        "plt.title('Average Salary by Remote Type (1–99th pct)')\n",
        "plt.ylabel('Mean Annual Salary')\n",
        "plt.xticks(rotation=0)\n",
        "\n",
        "# Add value labels on top of each bar\n",
        "for bar in bars.patches:\n",
        "    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{int(bar.get_height())}', \n",
        "             ha='center', va='bottom')"
      ],
      "id": "4e0f9ceb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Trim outliers\n",
        "low, high = eda['SALARY'].quantile([0.01, 0.99])\n",
        "eda_trim = eda[(eda['SALARY'] >= low) & (eda['SALARY'] <= high)]\n",
        "\n",
        "# Plot histogram\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(eda_trim['SALARY'], bins=30, color='#4C72B0', edgecolor='black')\n",
        "plt.title('Salary Distribution (1–99th pct)')\n",
        "plt.xlabel('Annual Salary')\n",
        "plt.ylabel('Frequency')"
      ],
      "id": "0b26d12e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "# Define target industries (same as before)\n",
        "target_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n",
        "\n",
        "# Filter the original DataFrame for these industries\n",
        "# Assuming 'df' has a 'SALARY' column (from our regression analysis context)\n",
        "df_target = eda[eda[\"NAICS2_NAME\"].isin(target_industries)].copy()\n",
        "\n",
        "# Map DATA_ANALYST_JOB to meaningful labels\n",
        "df_target['Job_Category'] = df_target['DATA_ANALYST_JOB'].map({True: 'Data Analyst', False: 'Business Analyst'})\n",
        "\n",
        "# Group by Job_Category and REMOTE_TYPE_NAME, calculate average salary\n",
        "df_salary_grouped = df_target.groupby(['Job_Category', 'REMOTE_TYPE_NAME'])['SALARY'].mean().reset_index(name='Avg_Salary')\n",
        "\n",
        "# Create a grouped bar chart\n",
        "fig = px.bar(df_salary_grouped,\n",
        "             x='Job_Category',\n",
        "             y='Avg_Salary',\n",
        "             color='REMOTE_TYPE_NAME',\n",
        "             title=\"Average Salary by Remote Type and Job Category (Finance & Healthcare)\",\n",
        "             labels={'Job_Category': 'Job Category', 'Avg_Salary': 'Average Salary ($)', 'REMOTE_TYPE_NAME': 'Remote Type'},\n",
        "             barmode='group',\n",
        "             color_discrete_map={\"Remote\": \"#6AB1E9\", \"On-Site\": \"#EF767A\", \"Hybrid\": \"#49C6B7\"})\n",
        "\n",
        "# Beautify the layout\n",
        "fig.update_layout(\n",
        "    width=900,\n",
        "    height=600,\n",
        "    plot_bgcolor='rgba(240, 240, 245, 1)',\n",
        "    paper_bgcolor='rgba(255, 255, 255, 1)',\n",
        "    font=dict(family=\"Poppins, sans-serif\", size=14, color=\"#2D3436\"),\n",
        "    title=dict(\n",
        "        text=\"Average Salary by Remote Type and Job Category (Finance & Healthcare)\",\n",
        "        font=dict(size=24, color=\"#2D3436\"),\n",
        "        x=0.5,\n",
        "        xanchor=\"center\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"Job Category\",\n",
        "        title_font=dict(size=18),\n",
        "        tickfont=dict(size=14)\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Average Salary ($)\",\n",
        "        title_font=dict(size=18),\n",
        "        tickfont=dict(size=14),\n",
        "        gridcolor=\"rgba(200, 200, 200, 0.3)\"\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"Remote Type\",\n",
        "        font=dict(size=13),\n",
        "        x=1.05,\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "    bargap=0.2\n",
        ")\n",
        "\n",
        "# Add value labels on top of bars\n",
        "fig.update_traces(\n",
        "    text=df_salary_grouped['Avg_Salary'].round(2),\n",
        "    textposition='outside',\n",
        "    textfont=dict(size=12, color=\"#2D3436\")\n",
        ")\n"
      ],
      "id": "31ed7998",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/prawnz/Documents/Semester2/Web_analytics/ad688-employability-sp25A1-group11/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}