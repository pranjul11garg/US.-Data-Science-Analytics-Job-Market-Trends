[
  {
    "objectID": "rm_model.html",
    "href": "rm_model.html",
    "title": "Random Forest Classification for ML/Data Science Requirement",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\"data/lightcast_job_postings.csv\")\ndf.columns\n\nIndex(['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES',\n       'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL',\n       ...\n       'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME',\n       'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6',\n       'NAICS_2022_6_NAME'],\n      dtype='object', length=131)\n\n\n\nml_keywords = [\"machine learning\", \"data science\", \"ai\", \"artificial intelligence\", \"deep learning\", \"data scientist\"]\n\ndef requires_ml(skills):\n    if pd.isnull(skills):\n        return 0\n    skills = skills.lower()\n    return int(any(kw in skills for kw in ml_keywords))\n\ndf[\"REQUIRES_ML\"] = df[\"SKILLS_NAME\"].apply(requires_ml)\n\n\nfeatures = [\"TITLE\", \"SOC_2021_4_NAME\", \"NAICS2_NAME\", \"MIN_EDULEVELS_NAME\", \"MIN_YEARS_EXPERIENCE\"]\ntarget = \"REQUIRES_ML\"\n\ndf = df[features + [target, 'BODY']].dropna()\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\ndf_encoded = df.copy()\nlabel_encoders = {}\n\nfor col in features:\n    if df_encoded[col].dtype == \"object\":\n        le = LabelEncoder()\n        df_encoded[col] = le.fit_transform(df_encoded[col])\n        label_encoders[col] = le\n\n\nfrom sklearn.model_selection import train_test_split\n\nX = df_encoded[features]\ny = df_encoded[target]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.76      0.76      0.76      5257\n           1       0.72      0.72      0.72      4614\n\n    accuracy                           0.74      9871\n   macro avg       0.74      0.74      0.74      9871\nweighted avg       0.74      0.74      0.74      9871\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 5))\nplt.barh(features, rf.feature_importances_)\nplt.xlabel(\"Importance\")\nplt.title(\"Feature Importance - ML Role Classification\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Cleaned job descriptions\ndf['BODY_clean'] = df['BODY'].fillna(\"\").str.lower()\n\n# Target\ny = df['REQUIRES_ML']  # this should be a binary 1/0 column\n\n# TF-IDF vectorization\ntfidf = TfidfVectorizer(max_features=5000, stop_words='english')\nX = tfidf.fit_transform(df['BODY_clean'])\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y)\n\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.91      0.94      0.92      6644\n           1       0.92      0.89      0.90      5694\n\n    accuracy                           0.91     12338\n   macro avg       0.91      0.91      0.91     12338\nweighted avg       0.91      0.91      0.91     12338\n\n\n\n\nimport numpy as np\n\nimportances = model.feature_importances_\ntop_idx = np.argsort(importances)[-20:]\ntop_words = [tfidf.get_feature_names_out()[i] for i in top_idx]\n\nplt.barh(top_words, importances[top_idx])\nplt.title(\"Top Words for ML Role Classification\")\nplt.xlabel(\"Importance\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n# Generate confusion matrix\ncm = confusion_matrix(y_test, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\n\n# Plot\ndisp.plot(cmap=\"Blues\")\nplt.title(\"Confusion Matrix - ML Role Classification\")\nplt.show()\n\n\n\n\n\n\n\n\nWe selected a combination of structured and unstructured features to predict whether a job role requires Machine Learning or Data Science. Structured features such as TITLE, SOC_2021_4_NAME, NAICS2_NAME, MIN_EDULEVELS_NAME, and MIN_YEARS_EXPERIENCE were chosen based on domain relevance—these fields reflect the role’s function, industry, required education, and experience level, all of which can signal ML-related requirements. Additionally, we included the job description BODY text, applying TF-IDF vectorization to extract key terms. This allowed the model to learn from nuanced language patterns within postings. Feature importance and performance metrics confirm that both structured metadata and text data contribute meaningfully to classification accuracy."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "EDA",
    "section": "",
    "text": "import pandas as pd\n#eda = pd.read_csv(/data/eda_data.csv')\neda = pd.read_csv(\"data/eda_data.csv\")\n#eda = pd.read_csv('./data/eda_data.csv')\neda = pd.read_csv(\"/data/eda_data.csv\")\neda.head()\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[1], line 3\n      1 import pandas as pd\n      2 #eda = pd.read_csv(/data/eda_data.csv')\n----&gt; 3 eda = pd.read_csv(\"data/eda_data.csv\")\n      4 #eda = pd.read_csv('./data/eda_data.csv')\n      5 eda = pd.read_csv(\"/data/eda_data.csv\")\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1026, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n   1013 kwds_defaults = _refine_defaults_read(\n   1014     dialect,\n   1015     delimiter,\n   (...)\n   1022     dtype_backend=dtype_backend,\n   1023 )\n   1024 kwds.update(kwds_defaults)\n-&gt; 1026 return _read(filepath_or_buffer, kwds)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:620, in _read(filepath_or_buffer, kwds)\n    617 _validate_names(kwds.get(\"names\", None))\n    619 # Create the parser.\n--&gt; 620 parser = TextFileReader(filepath_or_buffer, **kwds)\n    622 if chunksize or iterator:\n    623     return parser\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1620, in TextFileReader.__init__(self, f, engine, **kwds)\n   1617     self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n   1619 self.handles: IOHandles | None = None\n-&gt; 1620 self._engine = self._make_engine(f, self.engine)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1880, in TextFileReader._make_engine(self, f, engine)\n   1878     if \"b\" not in mode:\n   1879         mode += \"b\"\n-&gt; 1880 self.handles = get_handle(\n   1881     f,\n   1882     mode,\n   1883     encoding=self.options.get(\"encoding\", None),\n   1884     compression=self.options.get(\"compression\", None),\n   1885     memory_map=self.options.get(\"memory_map\", False),\n   1886     is_text=is_text,\n   1887     errors=self.options.get(\"encoding_errors\", \"strict\"),\n   1888     storage_options=self.options.get(\"storage_options\", None),\n   1889 )\n   1890 assert self.handles is not None\n   1891 f = self.handles.handle\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/common.py:873, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    868 elif isinstance(handle, str):\n    869     # Check whether the filename is to be opened in binary mode.\n    870     # Binary mode does not support 'encoding' and 'newline'.\n    871     if ioargs.encoding and \"b\" not in ioargs.mode:\n    872         # Encoding\n--&gt; 873         handle = open(\n    874             handle,\n    875             ioargs.mode,\n    876             encoding=ioargs.encoding,\n    877             errors=errors,\n    878             newline=\"\",\n    879         )\n    880     else:\n    881         # Binary mode\n    882         handle = open(handle, ioargs.mode)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'data/eda_data.csv'\n\n\n\n\nimport os\nprint(\"Current working directory:\", os.getcwd())\nprint(\"Files in data/:\", os.listdir(\"./data\"))\n\nCurrent working directory: /home/runner/work/ad688-employability-sp25A1-group11/ad688-employability-sp25A1-group11\n\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[2], line 3\n      1 import os\n      2 print(\"Current working directory:\", os.getcwd())\n----&gt; 3 print(\"Files in data/:\", os.listdir(\"./data\"))\n\nFileNotFoundError: [Errno 2] No such file or directory: './data'\n\n\n\n\nimport pandas as pd\neda = pd.read_csv('./data/eda_data.csv')\n#eda = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n#eda.head(10)\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[3], line 2\n      1 import pandas as pd\n----&gt; 2 eda = pd.read_csv('./data/eda_data.csv')\n      3 #eda = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n      4 #eda.head(10)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1026, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n   1013 kwds_defaults = _refine_defaults_read(\n   1014     dialect,\n   1015     delimiter,\n   (...)\n   1022     dtype_backend=dtype_backend,\n   1023 )\n   1024 kwds.update(kwds_defaults)\n-&gt; 1026 return _read(filepath_or_buffer, kwds)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:620, in _read(filepath_or_buffer, kwds)\n    617 _validate_names(kwds.get(\"names\", None))\n    619 # Create the parser.\n--&gt; 620 parser = TextFileReader(filepath_or_buffer, **kwds)\n    622 if chunksize or iterator:\n    623     return parser\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1620, in TextFileReader.__init__(self, f, engine, **kwds)\n   1617     self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n   1619 self.handles: IOHandles | None = None\n-&gt; 1620 self._engine = self._make_engine(f, self.engine)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1880, in TextFileReader._make_engine(self, f, engine)\n   1878     if \"b\" not in mode:\n   1879         mode += \"b\"\n-&gt; 1880 self.handles = get_handle(\n   1881     f,\n   1882     mode,\n   1883     encoding=self.options.get(\"encoding\", None),\n   1884     compression=self.options.get(\"compression\", None),\n   1885     memory_map=self.options.get(\"memory_map\", False),\n   1886     is_text=is_text,\n   1887     errors=self.options.get(\"encoding_errors\", \"strict\"),\n   1888     storage_options=self.options.get(\"storage_options\", None),\n   1889 )\n   1890 assert self.handles is not None\n   1891 f = self.handles.handle\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/common.py:873, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    868 elif isinstance(handle, str):\n    869     # Check whether the filename is to be opened in binary mode.\n    870     # Binary mode does not support 'encoding' and 'newline'.\n    871     if ioargs.encoding and \"b\" not in ioargs.mode:\n    872         # Encoding\n--&gt; 873         handle = open(\n    874             handle,\n    875             ioargs.mode,\n    876             encoding=ioargs.encoding,\n    877             errors=errors,\n    878             newline=\"\",\n    879         )\n    880     else:\n    881         # Binary mode\n    882         handle = open(handle, ioargs.mode)\n\nFileNotFoundError: [Errno 2] No such file or directory: './data/eda_data.csv'\n\n\n\n\n# identifying data analyst jobs by keyword searching\nkeywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n            'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n            'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n            'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n\nmatch = lambda col: eda[col].str.contains('|'.join(keywords), case=False, na=False)\n\neda['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n             | match('SKILLS_NAME') \\\n             | match('SPECIALIZED_SKILLS_NAME') \neda['DATA_ANALYST_JOB'].value_counts()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 9\n      2 keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n      3             'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n      4             'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n      5             'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n      7 match = lambda col: eda[col].str.contains('|'.join(keywords), case=False, na=False)\n----&gt; 9 eda['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n     10              | match('SKILLS_NAME') \\\n     11              | match('SPECIALIZED_SKILLS_NAME') \n     12 eda['DATA_ANALYST_JOB'].value_counts()\n\nCell In[4], line 7, in &lt;lambda&gt;(col)\n      1 # identifying data analyst jobs by keyword searching\n      2 keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n      3             'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n      4             'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n      5             'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n----&gt; 7 match = lambda col: eda[col].str.contains('|'.join(keywords), case=False, na=False)\n      9 eda['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n     10              | match('SKILLS_NAME') \\\n     11              | match('SPECIALIZED_SKILLS_NAME') \n     12 eda['DATA_ANALYST_JOB'].value_counts()\n\nNameError: name 'eda' is not defined\n\n\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom plotly.subplots import make_subplots\n\n# Group data\ndf_grouped = eda.groupby(['DATA_ANALYST_JOB', 'NAICS2_NAME']).size().reset_index(name='Job_Count')\n\n# Shorten the industry names\nindustry_short_names = {\n    'Professional, Scientific, and Technical Services': 'Prof. Services',\n    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n    'Health Care and Social Assistance': 'Healthcare',\n    'Finance and Insurance': 'Finance',\n    'Information': 'Info Tech',\n    'Educational Services': 'Education',\n    'Manufacturing': 'Manufacturing',\n    'Retail Trade': 'Retail',\n    'Accommodation and Food Services': 'Hospitality',\n    'Other Services (except Public Administration)': 'Other Services',\n}\ndf_grouped['NAICS2_NAME_SHORT'] = df_grouped['NAICS2_NAME'].map(industry_short_names).fillna(df_grouped['NAICS2_NAME'])\n\n# Map DATA_ANALYST_JOB to True/False for the legend\ndf_grouped['Job_Type'] = df_grouped['DATA_ANALYST_JOB'].map({True: 'True', False: 'False'})\n\n# Define gradient color palettes for True/False\ncolor_gradients = {\n    'True': ['#4ECDC4', '#6BE6DE'],  # Teal gradient\n    'False': ['#FF6B6B', '#FF8787']  # Coral red gradient\n}\n\n# Create a subplot with a chart and a table\nfig = make_subplots(\n    rows=2, cols=1,\n    row_heights=[0.8, 0.2],\n    specs=[[{\"type\": \"bar\"}], [{\"type\": \"table\"}]],\n    vertical_spacing=0.05\n)\n\n# Create the initial bar chart traces\nfor job_type in df_grouped['Job_Type'].unique():\n    df_subset = df_grouped[df_grouped['Job_Type'] == job_type]\n    fig.add_trace(\n        go.Bar(\n            x=df_subset['NAICS2_NAME_SHORT'],\n            y=df_subset['Job_Count'],\n            name=job_type,\n            marker=dict(\n                colorscale=[[0, color_gradients[job_type][0]], [1, color_gradients[job_type][1]]],\n                line=dict(width=1.2, color=\"#2D3748\")\n            ),\n            opacity=0.85,\n            text=df_subset['Job_Count'],\n            textposition='outside',\n            textfont=dict(size=12, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n        ),\n        row=1, col=1\n    )\n\n# Add a table below the chart\nfig.add_trace(\n    go.Table(\n        header=dict(\n            values=['Industry', 'Job Type', 'Number of Jobs'],\n            font=dict(size=14, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n            fill_color='rgba(240, 240, 245, 1)',\n            line_color=\"#2D3748\"\n        ),\n        cells=dict(\n            values=[\n                df_grouped['NAICS2_NAME_SHORT'],\n                df_grouped['Job_Type'],\n                df_grouped['Job_Count']\n            ],\n            font=dict(size=12, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n            fill_color='rgba(255, 255, 255, 1)',\n            line_color=\"#2D3748\"\n        )\n    ),\n    row=2, col=1\n)\n\n# Define themes\nlight_theme = {\n    'plot_bgcolor': 'rgba(240, 240, 245, 1)',\n    'paper_bgcolor': 'rgba(255, 255, 255, 1)',\n    'font_color': '#2D3748',\n    'grid_color': 'rgba(200, 200, 200, 0.2)',\n    'line_color': '#2D3748',\n    'bg_gradient': 'linear-gradient(135deg, #E6E9FF 0%, #F5F5FA 100%)'\n}\n\ndark_theme = {\n    'plot_bgcolor': 'rgba(30, 30, 40, 1)',\n    'paper_bgcolor': 'rgba(20, 20, 30, 1)',\n    'font_color': '#E2E8F0',\n    'grid_color': 'rgba(255, 255, 255, 0.1)',\n    'line_color': '#E2E8F0',\n    'bg_gradient': 'linear-gradient(135deg, #2D3748 0%, #1A202C 100%)'\n}\n\n# Initial theme\ncurrent_theme = light_theme\n\n# Beautify the layout with advanced interactivity\nfig.update_layout(\n    # Sizing and margins\n    autosize=True,\n    width=1200,\n    height=900,\n    margin=dict(l=50, r=50, t=120, b=50),\n\n    # Background with animated gradient\n    shapes=[\n        dict(\n            type=\"rect\",\n            x0=0, y0=0, x1=1, y1=1,\n            xref=\"paper\", yref=\"paper\",\n            fillcolor=current_theme['bg_gradient'],\n            line=dict(width=0),\n            layer=\"below\"\n        )\n    ],\n    plot_bgcolor=current_theme['plot_bgcolor'],\n    paper_bgcolor=current_theme['paper_bgcolor'],\n    font=dict(family=\"Helvetica, sans-serif\", size=14, color=current_theme['font_color']),\n\n    # Title styling\n    title=dict(\n        text=\"Data & Business Analytics Job Trends\",\n        font=dict(size=30, color=current_theme['font_color'], family=\"Helvetica, sans-serif\"),\n        x=0.5,\n        xanchor=\"center\",\n        y=0.95,\n        yanchor=\"top\"\n    ),\n\n    # X-axis styling\n    xaxis=dict(\n        title=\"Industry\",\n        title_font=dict(size=18, color=current_theme['font_color']),\n        tickfont=dict(size=13, color=current_theme['font_color']),\n        tickangle=-30,\n        gridcolor=current_theme['grid_color'],\n        linecolor=current_theme['line_color'],\n        linewidth=2,\n        showline=True\n    ),\n\n    # Y-axis styling\n    yaxis=dict(\n        title=\"Number of Jobs\",\n        title_font=dict(size=18, color=current_theme['font_color']),\n        tickfont=dict(size=13, color=current_theme['font_color']),\n        range=[0, df_grouped['Job_Count'].max() * 1.15],\n        gridcolor=current_theme['grid_color'],\n        linecolor=current_theme['line_color'],\n        linewidth=2,\n        showline=True\n    ),\n\n    # Legend styling\n    legend=dict(\n        title=\"Job Type\",\n        font=dict(size=13, color=current_theme['font_color']),\n        bgcolor=\"rgba(255, 255, 255, 0.95)\" if current_theme == light_theme else \"rgba(30, 30, 40, 0.95)\",\n        bordercolor=current_theme['line_color'],\n        borderwidth=1,\n        x=1.02,\n        y=0.5,\n        xanchor=\"left\",\n        yanchor=\"middle\"\n    ),\n\n    # Hover and interactivity\n    hovermode=\"closest\",\n    hoverlabel=dict(\n        bgcolor=\"rgba(255, 255, 255, 0.9)\" if current_theme == light_theme else \"rgba(30, 30, 40, 0.9)\",\n        font_size=13,\n        font_family=\"Helvetica, sans-serif\",\n        font_color=current_theme['font_color'],\n        bordercolor=current_theme['line_color']\n    ),\n\n    # Bar spacing\n    bargap=0.2,\n\n    # Add interactive controls\n    updatemenus=[\n        # 2D/3D Toggle\n        dict(\n            buttons=[\n                dict(\n                    label=\"2D View\",\n                    method=\"update\",\n                    args=[{\"type\": \"bar\"}, {\"scene\": None}]\n                ),\n                dict(\n                    label=\"3D View\",\n                    method=\"update\",\n                    args=[{\"type\": \"bar\", \"z\": [df_grouped['Job_Count']]}, {\"scene\": dict(\n                        xaxis=dict(title=\"Industry\"),\n                        yaxis=dict(title=\"Job Type\"),\n                        zaxis=dict(title=\"Number of Jobs\")\n                    )}]\n                )\n            ],\n            direction=\"down\",\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=1.15,\n            yanchor=\"top\"\n        ),\n        # Theme Toggle\n        dict(\n            buttons=[\n                dict(\n                    label=\"Light Theme\",\n                    method=\"relayout\",\n                    args=[{\n                        \"plot_bgcolor\": light_theme['plot_bgcolor'],\n                        \"paper_bgcolor\": light_theme['paper_bgcolor'],\n                        \"font.color\": light_theme['font_color'],\n                        \"xaxis.gridcolor\": light_theme['grid_color'],\n                        \"yaxis.gridcolor\": light_theme['grid_color'],\n                        \"xaxis.linecolor\": light_theme['line_color'],\n                        \"yaxis.linecolor\": light_theme['line_color'],\n                        \"legend.bgcolor\": \"rgba(255, 255, 255, 0.95)\",\n                        \"legend.bordercolor\": light_theme['line_color'],\n                        \"hoverlabel.bgcolor\": \"rgba(255, 255, 255, 0.9)\",\n                        \"hoverlabel.bordercolor\": light_theme['line_color'],\n                        \"hoverlabel.font.color\": light_theme['font_color'],\n                        \"shapes[0].fillcolor\": light_theme['bg_gradient']\n                    }]\n                ),\n                dict(\n                    label=\"Dark Theme\",\n                    method=\"relayout\",\n                    args=[{\n                        \"plot_bgcolor\": dark_theme['plot_bgcolor'],\n                        \"paper_bgcolor\": dark_theme['paper_bgcolor'],\n                        \"font.color\": dark_theme['font_color'],\n                        \"xaxis.gridcolor\": dark_theme['grid_color'],\n                        \"yaxis.gridcolor\": dark_theme['grid_color'],\n                        \"xaxis.linecolor\": dark_theme['line_color'],\n                        \"yaxis.linecolor\": dark_theme['line_color'],\n                        \"legend.bgcolor\": \"rgba(30, 30, 40, 0.95)\",\n                        \"legend.bordercolor\": dark_theme['line_color'],\n                        \"hoverlabel.bgcolor\": \"rgba(30, 30, 40, 0.9)\",\n                        \"hoverlabel.bordercolor\": dark_theme['line_color'],\n                        \"hoverlabel.font.color\": dark_theme['font_color'],\n                        \"shapes[0].fillcolor\": dark_theme['bg_gradient']\n                    }]\n                )\n            ],\n            direction=\"down\",\n            showactive=True,\n            x=0.3,\n            xanchor=\"left\",\n            y=1.15,\n            yanchor=\"top\"\n        ),\n        # Voice Narration (Browser-dependent)\n        dict(\n            buttons=[\n                dict(\n                    label=\"Narrate Insights\",\n                    method=\"animate\",\n                    args=[None, {\n                        \"frame\": {\"duration\": 0},\n                        \"fromcurrent\": True,\n                        \"transition\": {\"duration\": 0},\n                        \"mode\": \"immediate\"\n                    }],\n                    execute=True,\n                    labeljs=\"() =&gt; { const msg = new SpeechSynthesisUtterance('The top industry is ' + '\" +\n                           df_grouped.loc[df_grouped['Job_Count'].idxmax()]['NAICS2_NAME_SHORT'] +\n                           \" with \" + df_grouped['Job_Count'].max() + \" jobs.'); window.speechSynthesis.speak(msg); }\"\n                )\n            ],\n            direction=\"down\",\n            showactive=False,\n            x=0.5,\n            xanchor=\"left\",\n            y=1.15,\n            yanchor=\"top\"\n        )\n    ],\n\n    # Add a slider for filtering job counts\n    sliders=[\n        dict(\n            active=0,\n            currentvalue={\"prefix\": \"Min Job Count: \"},\n            pad={\"t\": 50},\n            steps=[\n                dict(\n                    label=str(i),\n                    method=\"update\",\n                    args=[\n                        {\"visible\": [True if df_grouped['Job_Count'][j] &gt;= i else False for j in range(len(df_grouped))]},\n                        {\"title\": f\"Industries with At Least {i} Jobs\"}\n                    ]\n                ) for i in range(0, int(df_grouped['Job_Count'].max()) + 500, 500)\n            ]\n        )\n    ]\n)\n\n# Customize the bars with animations and hover effects\nfig.update_traces(\n    marker=dict(\n        line=dict(width=1.2, color=\"#2D3748\")\n    ),\n    opacity=0.85,\n    hovertemplate=\"&lt;b&gt;%{x}&lt;/b&gt;&lt;br&gt;Type: %{fullData.name}&lt;br&gt;Jobs: %{y}&lt;extra&gt;&lt;/extra&gt;\",\n    transition=dict(duration=600, easing=\"cubic-in-out\"),\n    animation=dict(\n        frame=dict(duration=600, redraw=True),\n        fromcurrent=True,\n        transition=dict(duration=600, easing=\"cubic-in-out\")\n    )\n)\n\n# Add annotation for the highest job count\nmax_job = df_grouped.loc[df_grouped['Job_Count'].idxmax()]\nfig.add_annotation(\n    x=max_job['NAICS2_NAME_SHORT'],\n    y=max_job['Job_Count'] * 1.1,\n    text=f\"Top: {max_job['NAICS2_NAME_SHORT']}&lt;br&gt;{max_job['Job_Count']} Jobs\",\n    showarrow=True,\n    arrowhead=1,\n    ax=20,\n    ay=-40,\n    font=dict(size=13, color=\"#2D3748\", family=\"Helvetica, sans-serif\"),\n    bgcolor=\"rgba(255, 255, 255, 0.85)\",\n    bordercolor=\"#2D3748\",\n    borderwidth=1,\n    borderpad=4\n)\n\n# Add a download button for the table\nfig.update_layout(\n    annotations=[\n        dict(\n            text=\"Download Table as CSV\",\n            x=1.0,\n            y=-0.2,\n            xref=\"paper\",\n            yref=\"paper\",\n            showarrow=False,\n            font=dict(size=12, color=\"#2D3748\"),\n            bgcolor=\"rgba(255, 255, 255, 0.85)\",\n            bordercolor=\"#2D3748\",\n            borderwidth=1,\n            borderpad=4,\n            clicktoshow=\"onoff\",\n            clickevent=\"download\",\n            download=dict(\n                filename=\"job_trends_data.csv\",\n                content=df_grouped[['NAICS2_NAME_SHORT', 'Job_Type', 'Job_Count']].to_csv(index=False)\n            )\n        )\n    ]\n)\n\n# Show the plot\nfig.show()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 7\n      4 from plotly.subplots import make_subplots\n      6 # Group data\n----&gt; 7 df_grouped = eda.groupby(['DATA_ANALYST_JOB', 'NAICS2_NAME']).size().reset_index(name='Job_Count')\n      9 # Shorten the industry names\n     10 industry_short_names = {\n     11     'Professional, Scientific, and Technical Services': 'Prof. Services',\n     12     'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n   (...)\n     20     'Other Services (except Public Administration)': 'Other Services',\n     21 }\n\nNameError: name 'eda' is not defined\n\n\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Identify the top 10 industries with the most data analyst jobs\ntop_industries = df_grouped.groupby(\"NAICS2_NAME\")[\"Job_Count\"].sum().nlargest(10).index\n\n# Filter the dataset for top industries\ndf_top_industries = df_grouped[df_grouped[\"NAICS2_NAME\"].isin(top_industries)].copy()\n\n# Shorten industry names for better readability\nindustry_short_names = {\n    'Professional, Scientific, and Technical Services': 'Prof. Services',\n    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n    'Health Care and Social Assistance': 'Healthcare',\n    'Finance and Insurance': 'Finance',\n    'Information': 'Info Tech',\n    'Educational Services': 'Education',\n    'Manufacturing': 'Manufacturing',\n    'Retail Trade': 'Retail',\n    'Accommodation and Food Services': 'Hospitality',\n    'Other Services (except Public Administration)': 'Other Services',\n}\ndf_top_industries['NAICS2_NAME_SHORT'] = (\n    df_top_industries['NAICS2_NAME']\n    .map(industry_short_names)\n    .fillna(df_top_industries['NAICS2_NAME'])\n)\n\n# Update DATA_ANALYST_JOB labels for clarity\ndf_top_industries['Job_Category'] = df_top_industries['DATA_ANALYST_JOB'].map({True: 'Data Analyst', False: 'Business Analyst'})\n\n# Define a modern, vibrant color palette for industries (10 colors for top 10 industries)\ncolor_palette = [\n    '#FF6B6B',  # Coral Red\n    '#4ECDC4',  # Teal\n    '#45B7D1',  # Sky Blue\n    '#96CEB4',  # Sage Green\n    '#FFEEAD',  # Soft Yellow\n    '#D4A5A5',  # Dusty Rose\n    '#9B59B6',  # Purple\n    '#3498DB',  # Bright Blue\n    '#E67E22',  # Orange\n    '#1ABC9C',  # Turquoise\n]\ncolor_map = {industry: color for industry, color in zip(df_top_industries['NAICS2_NAME_SHORT'].unique(), color_palette)}\n\n# Create the bar chart\nfig = px.bar(df_top_industries, \n             x=\"Job_Category\",  # Use the updated labels\n             y=\"Job_Count\", \n             color=\"NAICS2_NAME_SHORT\",\n             title=\"Top 10 Industries Hiring Data & Business Analysts\",\n             labels={'Job_Category': 'Job Category', 'Job_Count': 'Number of Jobs', 'NAICS2_NAME_SHORT': 'Industry'},\n             barmode='group')\n\n# Beautify the layout with advanced styling\nfig.update_layout(\n    autosize=True,\n    width=1150,  # Slightly wider for balance\n    height=650,  # Adjusted height\n    margin=dict(l=60, r=150, t=100, b=80),  # Adjusted for legend and title\n\n    # Background and plot styling\n    plot_bgcolor='rgba(245, 245, 250, 1)',  # Very light lavender-gray\n    paper_bgcolor='rgba(255, 255, 255, 1)',  # White paper background\n    font=dict(family=\"Poppins, sans-serif\", size=14, color=\"#2D3436\"),  # Modern, elegant font\n\n    # Title styling\n    title=dict(\n        text=\"Top 10 Industries Hiring Data & Business Analysts\",\n        font=dict(size=30, color=\"#1A202C\", family=\"Inter, sans-serif\"),\n        x=0.5,\n        xanchor=\"center\",\n        y=0.95,\n        yanchor=\"top\"\n    ),\n\n    # x-axis styling\n    xaxis=dict(\n        title=\"Job Category\",\n        title_font=dict(size=18, color=\"#2D3436\"),\n        tickfont=dict(size=14, color=\"#636E72\"),\n        gridcolor=\"rgba(200, 200, 200, 0.1)\",  # Very subtle gridlines\n        linecolor=\"#2D3436\",\n        linewidth=2,\n        showline=True\n    ),\n\n    # y-axis styling\n    yaxis=dict(\n        title=\"Number of Jobs\",\n        title_font=dict(size=18, color=\"#2D3436\"),\n        tickfont=dict(size=14, color=\"#636E72\"),\n        range=[0, df_top_industries['Job_Count'].max() * 1.2],  # Extended range\n        gridcolor=\"rgba(200, 200, 200, 0.3)\",\n        linecolor=\"#2D3436\",\n        linewidth=2,\n        showline=True\n    ),\n\n    # legend styling\n    legend=dict(\n        title=\"Industry\",\n        font=dict(size=13, color=\"#2D3436\"),\n        bgcolor=\"rgba(255, 255, 255, 0.95)\",\n        bordercolor=\"#2D3436\",\n        borderwidth=1,\n        x=1.02,\n        y=0.5,\n        xanchor=\"left\",\n        yanchor=\"middle\"\n    ),\n\n    # interactivity settings\n    hovermode=\"closest\",\n    hoverlabel=dict(\n        bgcolor=\"rgba(255, 255, 255, 0.9)\",\n        font_size=13,\n        font_family=\"Poppins, sans-serif\",\n        font_color=\"#2D3436\",\n        bordercolor=\"#2D3436\",\n        align=\"left\"\n    ),\n\n    # Bar spacing\n    bargap=0.25,  # Add space between bars\n    barnorm=None,\n)\n\n# Customize the bars\nfig.update_traces(\n    marker=dict(\n        line=dict(width=1, color=\"#2D3436\"),  # Subtle border\n        # Add a slight gradient effect using opacity\n        opacity=0.9,\n    ),\n    text=df_top_industries['Job_Count'],  # Add labels on bars\n    textposition='outside',  # Place labels outside\n    textfont=dict(size=12, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n    texttemplate='%{text}',  # Show just the number\n    # Custom hover template\n    hovertemplate=\"&lt;b&gt;%{fullData.name}&lt;/b&gt;&lt;br&gt;Category: %{x}&lt;br&gt;Jobs: %{y}&lt;extra&gt;&lt;/extra&gt;\",\n)\n\n# Add a subtle gradient background effect (using shapes)\nfig.add_shape(\n    type=\"rect\",\n    x0=0, y0=0, x1=1, y1=1,\n    xref=\"paper\", yref=\"paper\",\n    fillcolor=\"rgba(220, 221, 255, 0.2)\",  # Very light gradient overlay\n    line=dict(width=0),\n    layer=\"below\"\n)\n\n# Add an annotation for the highest job count\nmax_job = df_top_industries.loc[df_top_industries['Job_Count'].idxmax()]\nfig.add_annotation(\n    x=max_job,\n    y=max_count * 1.15,\n    text=f\"Top: {max_job}&lt;br&gt;{max_count} Jobs\",\n    showarrow=True,\n    arrowhead=1,\n    ax=20,\n    ay=-40,\n    font=dict(size=13, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n    bgcolor=\"rgba(255, 255, 255, 0.9)\",\n    bordercolor=\"#2D3436\",\n    borderwidth=1,\n    borderpad=4\n)\n\n# Add shadow effect to the title\nfig.add_annotation(\n    x=0.5,\n    y=0.95,\n    xref=\"paper\",\n    yref=\"paper\",\n    text=\"Top 10 Industries Hiring Data & Business Analysts\",\n    showarrow=False,\n    font=dict(size=28, color=\"rgba(0, 0, 0, 0.05)\", family=\"Poppins, sans-serif\"),\n    xanchor=\"center\",\n    yanchor=\"top\",\n    yshift=-2,\n    xshift=2\n)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 5\n      2 import plotly.graph_objects as go\n      4 # Identify the top 10 industries with the most data analyst jobs\n----&gt; 5 top_industries = df_grouped.groupby(\"NAICS2_NAME\")[\"Job_Count\"].sum().nlargest(10).index\n      7 # Filter the dataset for top industries\n      8 df_top_industries = df_grouped[df_grouped[\"NAICS2_NAME\"].isin(top_industries)].copy()\n\nNameError: name 'df_grouped' is not defined\n\n\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Define target industries\ntarget_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n\n# Filter the original DataFrame (df) instead of df_grouped\ndf_remote = eda[eda[\"NAICS2_NAME\"].isin(target_industries)]\n\n# Count occurrences of each remote type in these industries\ndf_remote_grouped = df_remote.groupby(\"REMOTE_TYPE_NAME\").size().reset_index(name=\"Count\")\n\n# Define a modern color palette\ncolor_map = {\n    \"Remote\": \"#6AB1E9\",  # Soft Sky Blue\n    \"On-Site\": \"#EF767A\",  # Soft Coral\n    \"Hybrid\": \"#49C6B7\"   # Teal-Green\n}\n\n# Create the pie chart\nfig = px.pie(df_remote_grouped, \n             names=\"REMOTE_TYPE_NAME\", \n             values=\"Count\", \n             title=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n             color=\"REMOTE_TYPE_NAME\", \n             color_discrete_map=color_map)\n\n# Beautify the layout\nfig.update_layout(\n    # Sizing and margins\n    autosize=True,\n    width=900,  # Compact width for pie charts\n    height=700,  # Taller height to accommodate title and legend\n    margin=dict(l=50, r=50, t=120, b=50),  # Adjusted margins for title\n\n    # Background styling\n    plot_bgcolor='rgba(240, 240, 245, 1)',  # Light gray background\n    paper_bgcolor='rgba(255, 255, 255, 1)',  # White paper background\n    font=dict(family=\"Poppins, sans-serif\", size=14, color=\"#2D3436\"),  # Modern font\n\n    # Title styling\n    title=dict(\n        text=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n        font=dict(size=24, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n        x=0.5,\n        xanchor=\"center\",\n        y=0.95,\n        yanchor=\"top\"\n    ),\n\n    # Legend styling\n    legend=dict(\n        title=\"Remote Type\",\n        font=dict(size=13, color=\"#2D3436\"),\n        bgcolor=\"rgba(255, 255, 255, 0.95)\",\n        bordercolor=\"#2D3436\",\n        borderwidth=1,\n        x=1.05,  # Position outside\n        y=0.5,\n        xanchor=\"left\",\n        yanchor=\"middle\"\n    ),\n\n    # Hover and interactivity\n    hovermode=\"closest\",\n    hoverlabel=dict(\n        bgcolor=\"rgba(255, 255, 255, 0.9)\",\n        font_size=13,\n        font_family=\"Poppins, sans-serif\",\n        font_color=\"#2D3436\",\n        bordercolor=\"#2D3436\"\n    ),\n\n    # Add a subtle gradient background effect\n    shapes=[\n        dict(\n            type=\"rect\",\n            x0=0, y0=0, x1=1, y1=1,\n            xref=\"paper\", yref=\"paper\",\n            fillcolor=\"rgba(220, 221, 255, 0.2)\",  # Light gradient overlay\n            line=dict(width=0),\n            layer=\"below\"\n        )\n    ]\n)\n\n# Customize the pie chart slices\nfig.update_traces(\n    # Add percentages and labels\n    textinfo=\"percent+label\",\n    textfont=dict(size=14, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n    textposition=\"inside\",  # Place labels inside for a cleaner look\n\n    # Add a subtle border to slices\n    marker=dict(\n        line=dict(color=\"#2D3436\", width=1.5)\n    ),\n\n    # Pull out the largest slice slightly for emphasis\n    pull=[0.1 if count == df_remote_grouped['Count'].max() else 0 for count in df_remote_grouped['Count']],\n\n    # Add a slight opacity for a softer look\n    opacity=0.9,\n\n    # Custom hover template\n    hovertemplate=\"&lt;b&gt;%{label}&lt;/b&gt;&lt;br&gt;Count: %{value}&lt;br&gt;Percentage: %{percent}&lt;extra&gt;&lt;/extra&gt;\",\n\n    # Add a rotation for better presentation\n    rotation=45,\n\n    # Add a subtle shadow effect to slices (simulated with opacity and border)\n    sort=False  # Keep the order as in the data\n)\n\n# Add an annotation for the largest slice\nmax_slice = df_remote_grouped.loc[df_remote_grouped['Count'].idxmax()]\nfig.add_annotation(\n    x=0.5,\n    y=0.1,\n    xref=\"paper\",\n    yref=\"paper\",\n    text=f\"Dominant Type: {max_slice['REMOTE_TYPE_NAME']}&lt;br&gt;{max_slice['Count']} Jobs ({fig.data[0]['values'].tolist().index(max_slice['Count'])*100/sum(fig.data[0]['values']):.1f}%)\",\n    showarrow=False,\n    font=dict(size=13, color=\"#2D3436\", family=\"Poppins, sans-serif\"),\n    bgcolor=\"rgba(255, 255, 255, 0.9)\",\n    bordercolor=\"#2D3436\",\n    borderwidth=1,\n    borderpad=4\n)\n\n# Add a shadow effect to the title (simulated with a duplicate text)\nfig.add_annotation(\n    x=0.5,\n    y=0.95,\n    xref=\"paper\",\n    yref=\"paper\",\n    text=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n    showarrow=False,\n    font=dict(size=24, color=\"rgba(0, 0, 0, 0.05)\", family=\"Poppins, sans-serif\"),\n    xanchor=\"center\",\n    yanchor=\"top\",\n    yshift=-2,\n    xshift=2\n)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[7], line 8\n      5 target_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n      7 # Filter the original DataFrame (df) instead of df_grouped\n----&gt; 8 df_remote = eda[eda[\"NAICS2_NAME\"].isin(target_industries)]\n     10 # Count occurrences of each remote type in these industries\n     11 df_remote_grouped = df_remote.groupby(\"REMOTE_TYPE_NAME\").size().reset_index(name=\"Count\")\n\nNameError: name 'eda' is not defined\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 1) Trim out the 1–99th percentile so outliers don’t skew the means\nlow, high = eda['SALARY'].quantile([0.01, 0.99])\neda_trim = eda[(eda['SALARY'] &gt;= low) & (eda['SALARY'] &lt;= high)]\n\n# 2) Compute mean salary by remote type\nmeans = eda_trim.groupby('REMOTE_TYPE_NAME')['SALARY'].mean().loc[['Remote', 'Not Remote', 'Hybrid Remote']]\n\n# 3) Plot with value labels\nplt.figure(figsize=(10, 7))\nbars = means.plot.bar(color=['#4C72B0', '#55A868', '#C44E52'])\nplt.title('Average Salary by Remote Type (1–99th pct)')\nplt.ylabel('Mean Annual Salary')\nplt.xticks(rotation=0)\n\n# Add value labels on top of each bar\nfor bar in bars.patches:\n    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{int(bar.get_height())}', \n             ha='center', va='bottom')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 5\n      2 import matplotlib.pyplot as plt\n      4 # 1) Trim out the 1–99th percentile so outliers don’t skew the means\n----&gt; 5 low, high = eda['SALARY'].quantile([0.01, 0.99])\n      6 eda_trim = eda[(eda['SALARY'] &gt;= low) & (eda['SALARY'] &lt;= high)]\n      8 # 2) Compute mean salary by remote type\n\nNameError: name 'eda' is not defined\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Trim outliers\nlow, high = eda['SALARY'].quantile([0.01, 0.99])\neda_trim = eda[(eda['SALARY'] &gt;= low) & (eda['SALARY'] &lt;= high)]\n\n# Plot histogram\nplt.figure(figsize=(8, 6))\nplt.hist(eda_trim['SALARY'], bins=30, color='#4C72B0', edgecolor='black')\nplt.title('Salary Distribution (1–99th pct)')\nplt.xlabel('Annual Salary')\nplt.ylabel('Frequency')\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 5\n      2 import matplotlib.pyplot as plt\n      4 # Trim outliers\n----&gt; 5 low, high = eda['SALARY'].quantile([0.01, 0.99])\n      6 eda_trim = eda[(eda['SALARY'] &gt;= low) & (eda['SALARY'] &lt;= high)]\n      8 # Plot histogram\n\nNameError: name 'eda' is not defined\n\n\n\n\nimport plotly.express as px\nimport pandas as pd\n\n# Define target industries (same as before)\ntarget_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n\n# Filter the original DataFrame for these industries\n# Assuming 'df' has a 'SALARY' column (from our regression analysis context)\ndf_target = eda[eda[\"NAICS2_NAME\"].isin(target_industries)].copy()\n\n# Map DATA_ANALYST_JOB to meaningful labels\ndf_target['Job_Category'] = df_target['DATA_ANALYST_JOB'].map({True: 'Data Analyst', False: 'Business Analyst'})\n\n# Group by Job_Category and REMOTE_TYPE_NAME, calculate average salary\ndf_salary_grouped = df_target.groupby(['Job_Category', 'REMOTE_TYPE_NAME'])['SALARY'].mean().reset_index(name='Avg_Salary')\n\n# Create a grouped bar chart\nfig = px.bar(df_salary_grouped,\n             x='Job_Category',\n             y='Avg_Salary',\n             color='REMOTE_TYPE_NAME',\n             title=\"Average Salary by Remote Type and Job Category (Finance & Healthcare)\",\n             labels={'Job_Category': 'Job Category', 'Avg_Salary': 'Average Salary ($)', 'REMOTE_TYPE_NAME': 'Remote Type'},\n             barmode='group',\n             color_discrete_map={\"Remote\": \"#6AB1E9\", \"On-Site\": \"#EF767A\", \"Hybrid\": \"#49C6B7\"})\n\n# Beautify the layout\nfig.update_layout(\n    width=900,\n    height=600,\n    plot_bgcolor='rgba(240, 240, 245, 1)',\n    paper_bgcolor='rgba(255, 255, 255, 1)',\n    font=dict(family=\"Poppins, sans-serif\", size=14, color=\"#2D3436\"),\n    title=dict(\n        text=\"Average Salary by Remote Type and Job Category (Finance & Healthcare)\",\n        font=dict(size=24, color=\"#2D3436\"),\n        x=0.5,\n        xanchor=\"center\"\n    ),\n    xaxis=dict(\n        title=\"Job Category\",\n        title_font=dict(size=18),\n        tickfont=dict(size=14)\n    ),\n    yaxis=dict(\n        title=\"Average Salary ($)\",\n        title_font=dict(size=18),\n        tickfont=dict(size=14),\n        gridcolor=\"rgba(200, 200, 200, 0.3)\"\n    ),\n    legend=dict(\n        title=\"Remote Type\",\n        font=dict(size=13),\n        x=1.05,\n        y=0.5,\n        xanchor=\"left\",\n        yanchor=\"middle\"\n    ),\n    bargap=0.2\n)\n\n# Add value labels on top of bars\nfig.update_traces(\n    text=df_salary_grouped['Avg_Salary'].round(2),\n    textposition='outside',\n    textfont=dict(size=12, color=\"#2D3436\")\n)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 9\n      5 target_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n      7 # Filter the original DataFrame for these industries\n      8 # Assuming 'df' has a 'SALARY' column (from our regression analysis context)\n----&gt; 9 df_target = eda[eda[\"NAICS2_NAME\"].isin(target_industries)].copy()\n     11 # Map DATA_ANALYST_JOB to meaningful labels\n     12 df_target['Job_Category'] = df_target['DATA_ANALYST_JOB'].map({True: 'Data Analyst', False: 'Business Analyst'})\n\nNameError: name 'eda' is not defined"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trends in Data Science & Business Analytics!",
    "section": "",
    "text": "Welcome to our deep dive into the evolving landscape of Data Science and Business Analytics in the United States. As industries across the nation increasingly rely on data-driven insights, the role of data science and analytics has become paramount in shaping business strategies, optimizing operations, and driving innovation.\nThe rise of artificial intelligence (AI) is reshaping the landscape of data science and business analytics in the United States, creating both opportunities and challenges for workers and businesses alike. As AI continues to evolve, it has sparked widespread concern over job displacement. According to a recent report from the World Economic Forum, 86% of workers express concerns about AI potentially leading to job losses, with predictions of significant industry shifts occurring within the next two to five years (Samuels (2024)). However, business leaders emphasize that AI is not merely a tool for job replacement—it’s a transformative force that is changing the nature of work itself. For instance, Rakuten’s partnership with OpenAI to create an internal version of ChatGPT is helping employees work more efficiently, focusing on higher-level tasks rather than being displaced by technology (Samuels (2024)).\n\n\n\nData Science Image\n\n\nOne key trend in 2024 is the growing demand for AI-related skills across various industries. A recent Gartner report highlights that many organizations are significantly increasing their investments in AI, with companies projected to spend an average of $2.5 million on AI integration in 2024 (Gartner (2024)). This investment is reshaping job descriptions and workforce requirements, as roles now demand proficiency in AI tools. For example, in software development, GitHub Copilot has been shown to increase programmers’ efficiency by 55%, enabling them to focus on complex problem-solving rather than repetitive coding tasks (GitHub (2023)). As a result, professionals who upskill and learn to work alongside AI will have better career prospects in the future.\n\n\n\nData Science Image\n\n\nThe career outlook for business analytics and data science professionals remains optimistic, as companies increasingly look to combine AI with human decision-making to enhance productivity and innovation. Industry leaders, including Bev White, CEO of Nash Squared, emphasize that AI is not about eliminating jobs, but rather reshaping them to make work more productive and meaningful (White (2024)). Similarly, PepsiCo’s CIO, Nigel Richardson, believes that while some jobs will be replaced, AI will ultimately create more opportunities than it eliminates (Richardson (2024)). This aligns with a McKinsey report that forecasts AI could generate up to $13 trillion in additional global GDP by 2030, creating new job opportunities in data science, business analytics, and other technology-related fields (Company (2023)).\nThis website explores the latest trends, key developments, and future directions in Data Science and Business Analytics in the U.S. We delve into emerging technologies, the growing demand for skilled professionals, and the impact these fields are having on various industries. Our aim is to provide you with valuable insights into how data science is shaping the future of business and the economy.\nJoin us as we explore:\n\nThe role of machine learning, AI, and automation in business analytics.\nHow data-driven decisions are driving competitive advantages across industries.\nThe growing importance of data ethics and privacy concerns.\nKey skills and tools shaping the future of data professionals.\n\n\n\n\n\nReferences\n\nCompany, M. &. (2023): “The Economic Potential of Generative AI: The Next Productivity Frontier,”https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/the-economic-potential-of-generative-ai-the-next-productivity-frontier.\n\n\nGartner. (2024): “Marketing Budgets: Benchmarks for CMOs in the Era of Less,”https://www.gartner.com/en/marketing/topics/marketing-budget.\n\n\nGitHub. (2023): “GitHub Copilot: Your AI Pair Programmer,”https://github.com/features/copilot.\n\n\nRichardson, N. (2024): “CIO Interview: Nigel Richardson, European CIO, PepsiCo,”https://www.computerweekly.com/news/366570412/CIO-interview-Nigel-Richardson-European-CIO-PepsiCo.\n\n\nSamuels, M. (2024): “AI’s Employment Impact: 86% of Workers Fear Job Losses, but Here’s Some Good News,”https://www.zdnet.com/article/ai-employment-impact-86-of-workers-fear-job-losses-but-heres-some-good-news/.\n\n\nWhite, B. (2024): “The Future of Work: How AI Is Reshaping Careers,”https://www.harveynash.co.uk/team/bev-white."
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "This page presents our data cleaning and prepping part.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\ndf = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n\ncolumns_to_keep = [\n    'COMPANY', 'LOCATION', 'POSTED', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS_NAME',\n    'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'TITLE', 'SKILLS',\n    'SPECIALIZED_SKILLS', 'CERTIFICATIONS', 'COMMON_SKILLS', 'SOFTWARE_SKILLS',\n    'SOC_2021_4_NAME', 'NAICS_2022_6', 'NAICS2_NAME', 'REMOTE_TYPE_NAME',\n    'SALARY', 'TITLE_NAME', 'SKILLS_NAME', 'SPECIALIZED_SKILLS_NAME'\n]\neda_data = df[columns_to_keep]\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[1], line 6\n      3 import seaborn as sns\n      4 import missingno as msno\n----&gt; 6 df = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n      8 columns_to_keep = [\n      9     'COMPANY', 'LOCATION', 'POSTED', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS_NAME',\n     10     'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'TITLE', 'SKILLS',\n   (...)\n     13     'SALARY', 'TITLE_NAME', 'SKILLS_NAME', 'SPECIALIZED_SKILLS_NAME'\n     14 ]\n     15 eda_data = df[columns_to_keep]\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1026, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n   1013 kwds_defaults = _refine_defaults_read(\n   1014     dialect,\n   1015     delimiter,\n   (...)\n   1022     dtype_backend=dtype_backend,\n   1023 )\n   1024 kwds.update(kwds_defaults)\n-&gt; 1026 return _read(filepath_or_buffer, kwds)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:620, in _read(filepath_or_buffer, kwds)\n    617 _validate_names(kwds.get(\"names\", None))\n    619 # Create the parser.\n--&gt; 620 parser = TextFileReader(filepath_or_buffer, **kwds)\n    622 if chunksize or iterator:\n    623     return parser\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1620, in TextFileReader.__init__(self, f, engine, **kwds)\n   1617     self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n   1619 self.handles: IOHandles | None = None\n-&gt; 1620 self._engine = self._make_engine(f, self.engine)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1880, in TextFileReader._make_engine(self, f, engine)\n   1878     if \"b\" not in mode:\n   1879         mode += \"b\"\n-&gt; 1880 self.handles = get_handle(\n   1881     f,\n   1882     mode,\n   1883     encoding=self.options.get(\"encoding\", None),\n   1884     compression=self.options.get(\"compression\", None),\n   1885     memory_map=self.options.get(\"memory_map\", False),\n   1886     is_text=is_text,\n   1887     errors=self.options.get(\"encoding_errors\", \"strict\"),\n   1888     storage_options=self.options.get(\"storage_options\", None),\n   1889 )\n   1890 assert self.handles is not None\n   1891 f = self.handles.handle\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/common.py:873, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    868 elif isinstance(handle, str):\n    869     # Check whether the filename is to be opened in binary mode.\n    870     # Binary mode does not support 'encoding' and 'newline'.\n    871     if ioargs.encoding and \"b\" not in ioargs.mode:\n    872         # Encoding\n--&gt; 873         handle = open(\n    874             handle,\n    875             ioargs.mode,\n    876             encoding=ioargs.encoding,\n    877             errors=errors,\n    878             newline=\"\",\n    879         )\n    880     else:\n    881         # Binary mode\n    882         handle = open(handle, ioargs.mode)\n\nFileNotFoundError: [Errno 2] No such file or directory: './data/lightcast_job_postings.csv'\n\n\n\n\nmsno.heatmap(eda_data)\nplt.title(\"Missing Values Heatmap\")\nplt.savefig(\"figures/missingno_heatmap.svg\", format='svg', bbox_inches='tight')\nplt.show()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 msno.heatmap(eda_data)\n      2 plt.title(\"Missing Values Heatmap\")\n      3 plt.savefig(\"figures/missingno_heatmap.svg\", format='svg', bbox_inches='tight')\n\nNameError: name 'eda_data' is not defined\n\n\n\n\nif \"SALARY\" in eda_data.columns:\n    eda_data[\"SALARY\"].fillna(eda_data[\"SALARY\"].median(), inplace=True)\nelse:\n    print(\"⚠️ Warning: 'SALARY' column not found in dataframe!\")\n\nif \"COMPANY\" in eda_data.columns:\n    eda_data[\"COMPANY\"].fillna(\"Unknown\", inplace=True)\nelse:\n    print(\"⚠️ Warning: 'COMPANY' column not found in dataframe!\")\n\n    # Fill numeric columns with mean\nnum_cols = eda_data.select_dtypes(include='number').columns\nfor col in num_cols:\n    if eda_data[col].isnull().sum() &gt; 0:\n        eda_data[col].fillna(eda_data[col].mean(), inplace=True)\n\n# Fill categorical columns with mode\ncat_cols = eda_data.select_dtypes(include='object').columns\nfor col in cat_cols:\n    if eda_data[col].isnull().sum() &gt; 0:\n        eda_data[col].fillna(eda_data[col].mode()[0], inplace=True)\n\nprint(\"Remaining missing values filled based on column type.\")\n\n\neda_data.dropna(thresh=len(eda_data) * 0.5, axis=1, inplace=True)\n\n\nprint(\"Missing value handling complete.\")\n\n# delete duplicates\neda_data = eda_data.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"])\n\nprint(eda_data.isnull().sum())\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 if \"SALARY\" in eda_data.columns:\n      2     eda_data[\"SALARY\"].fillna(eda_data[\"SALARY\"].median(), inplace=True)\n      3 else:\n\nNameError: name 'eda_data' is not defined"
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skill Gap Analysis",
    "section": "",
    "text": "import pandas as pd\ndf= pd.read_csv(\"data/eda_data.csv\")"
  },
  {
    "objectID": "skill_gap_analysis.html#group-11-skill",
    "href": "skill_gap_analysis.html#group-11-skill",
    "title": "Skill Gap Analysis",
    "section": "Group 11 Skill",
    "text": "Group 11 Skill\n\nimport pandas as pd\n\nskills_data = {\n    \"Name\": [\"Binderiya\", \"Pranjul\", \"Pratham\", \"Panyang\"],\n    \"Python\": [4, 4, 5, 3],\n    \"SQL\": [4, 4, 5, 4],\n    \"Machine Learning\": [2, 3, 2, 2],\n    \"PySpark\": [3, 3, 3, 3],\n    \"Excel\": [4, 5, 5, 4],\n    \"Data Visualization\": [5, 5, 3, 3],\n    \"Power Bi/ Tableau\": [4, 5, 3, 4],\n    \"Version Control Git\": [4, 4, 3, 3],\n    \"ETL/Data pipeline\": [3, 2, 1, 2],\n    \"Communication\": [4, 4, 5, 3],\n    \"Project Management\": [5, 5, 5, 3],\n    \"Cloud Computing\": [4, 4, 2, 2]\n}\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nPySpark\nExcel\nData Visualization\nPower Bi/ Tableau\nVersion Control Git\nETL/Data pipeline\nCommunication\nProject Management\nCloud Computing\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBinderiya\n4\n4\n2\n3\n4\n5\n4\n4\n3\n4\n5\n4\n\n\nPranjul\n4\n4\n3\n3\n5\n5\n5\n4\n2\n4\n5\n4\n\n\nPratham\n5\n5\n2\n3\n5\n3\n3\n3\n1\n5\n5\n2\n\n\nPanyang\n3\n4\n2\n3\n4\n3\n4\n3\n2\n3\n3\n2\n\n\n\n\n\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 8))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5)\nplt.title(\"Team Skill Levels Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor name in df_skills.index:\n    values = df_skills.loc[name].tolist()\n    values += values[:1]  # close the loop\n    fig.add_trace(go.Scatterpolar(\n        r=values,\n        theta=df_skills.columns.tolist() + [df_skills.columns[0]],\n        fill='toself',\n        name=name\n    ))\n\nfig.update_layout(\n    polar=dict(radialaxis=dict(visible=True, range=[0, 5])),\n    showlegend=True,\n    title='Team Skills Radar Chart'\n)\nfig.write_html(\"figures/skills_radar_chart.html\")\nplt.savefig(\"figures/skills_radar_chart.svg\", format='svg', bbox_inches='tight')\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\nFrom this radar chart visualization we can see that our team has a lot of room for improvement for skills like PySpark and Machine Learning. Also we can see that not a lot of our team mates are confident in their skills in Cloud Computing and ETL."
  },
  {
    "objectID": "skill_gap_analysis.html#top-skills",
    "href": "skill_gap_analysis.html#top-skills",
    "title": "Skill Gap Analysis",
    "section": "Top Skills",
    "text": "Top Skills\n\nkeywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n            'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n            'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n            'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n\nmatch = lambda col: df[col].str.contains('|'.join(keywords), case=False, na=False)\n\ndf['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n             | match('SKILLS_NAME') \\\n             | match('SPECIALIZED_SKILLS_NAME') \ndf['DATA_ANALYST_JOB'].value_counts()\n\nDATA_ANALYST_JOB\nFalse    37043\nTrue     32155\nName: count, dtype: int64\n\n\n\nimport ast\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# Safely apply literal_eval only to non-null values\ndf['SKILLS'] = df['SKILLS_NAME'].apply(lambda x: ast.literal_eval(x) if pd.notnull(x) else [])\n\n\ndata_skills = df[df['DATA_ANALYST_JOB']]['SKILLS'].explode().value_counts().reset_index()\ndata_skills.columns = ['Skill', 'Count']\n\nfig = px.bar(data_skills, x='Skill', y='Count',\n             title=\"Top Skills\",\n             labels={'Skill': 'Skill Name', 'Count': 'Frequency'},\n             color='Skill')\ndf_skills.index = df_skills.index.str.strip()\n\n\n\nfrom collections import defaultdict\n\n# Lowercase everything\nteam_skills = [s.lower().strip() for s in df_skills.columns]\njob_demand_raw = data_skills.copy()\njob_demand_raw['Skill'] = job_demand_raw['Skill'].str.lower().str.strip()\n\n# New dict to map cleaned team skill to total count from job postings\nskill_demand_map = defaultdict(int)\n\nfor _, row in job_demand_raw.iterrows():\n    skill_in_posting = row['Skill']\n    count = row['Count']\n    for team_skill in team_skills:\n        if team_skill in skill_in_posting:\n            skill_demand_map[team_skill] += count\n\n\nteam_skills = [s.strip().lower() for s in df_skills.columns]\nprint(\"Team skills:\", team_skills)\nprint(job_demand_raw['Skill'].head(10).tolist())\nfor skill_text in job_demand_raw['Skill'].head(10):\n    for team_skill in team_skills:\n        if team_skill in skill_text:\n            print(f\" '{team_skill}' found in: '{skill_text}'\")\n\n\nTeam skills: ['python', 'sql', 'machine learning', 'pyspark', 'excel', 'data visualization', 'power bi/ tableau', 'version control git', 'etl/data pipeline', 'communication', 'project management', 'cloud computing']\n['data analysis', 'sql (programming language)', 'communication', 'management', 'python (programming language)', 'tableau (business intelligence software)', 'dashboard', 'computer science', 'problem solving', 'power bi']\n 'sql' found in: 'sql (programming language)'\n 'communication' found in: 'communication'\n 'python' found in: 'python (programming language)'\n\n\n\nfor _, row in job_demand_raw.iterrows():\n    skill_text = row['Skill']\n    count = row['Count']\n    for team_skill in team_skills:\n        if team_skill in skill_text:  # no regex, just substring\n            skill_demand_map[team_skill] += count\n\njob_demand = pd.Series(skill_demand_map)\nprint(job_demand)\n\nsql                   47368\ncommunication         47728\npython                21852\nexcel                 18682\ndata visualization    14568\nproject management    14568\nmachine learning       8386\ncloud computing        2390\npyspark                1008\ndtype: int64\n\n\n\njob_demand = pd.Series(skill_demand_map)\njob_demand.name = \"Count\"\nteam_avg = df_skills.mean()\nteam_avg.index = team_avg.index.str.strip().str.lower() \n# Now match only overlapping skills\ncommon_skills = job_demand.index.intersection(team_avg.index)\nteam_avg = team_avg[common_skills]\njob_demand = job_demand[common_skills]\n\n# Normalize job demand\njob_demand_normalized = 5 * (job_demand / job_demand.max())\njob_demand_normalized.name = \"Job Demand (Normalized)\"\n\n# Combine\ncomparison_df = pd.concat([team_avg, job_demand_normalized], axis=1)\ncomparison_df.columns = [\"Team Average Skill\", \"Job Demand (Normalized)\"]\ncomparison_df[\"Skill Gap\"] = comparison_df[\"Job Demand (Normalized)\"] - comparison_df[\"Team Average Skill\"]\ncomparison_df.sort_values(\"Skill Gap\", ascending=False, inplace=True)\n\ncomparison_df\n\n\n\n\n\n\n\n\nTeam Average Skill\nJob Demand (Normalized)\nSkill Gap\n\n\n\n\ncommunication\n4.00\n5.000000\n1.000000\n\n\nsql\n4.25\n4.962286\n0.712286\n\n\nmachine learning\n2.25\n0.878520\n-1.371480\n\n\npython\n4.00\n2.289222\n-1.710778\n\n\ndata visualization\n4.00\n1.526148\n-2.473852\n\n\nexcel\n4.50\n1.957132\n-2.542868\n\n\ncloud computing\n3.00\n0.250377\n-2.749623\n\n\npyspark\n3.00\n0.105598\n-2.894402\n\n\nproject management\n4.50\n1.526148\n-2.973852\n\n\n\n\n\n\n\n\ncomparison_df = comparison_df.reset_index().rename(columns={\"index\": \"Skill\"})\n\n\nimport plotly.express as px\n\nfig = px.bar(\n    comparison_df,\n    x='Skill',\n    y='Skill Gap',\n    color='Skill Gap',\n    color_continuous_scale='RdBu_r',\n    title='Skill Gaps: Job Market Expectations vs. Team Capability',\n    labels={'Skill Gap': 'Gap (Job Demand - Team Skill)', 'Skill': 'Skill'},\n)\n\nfig.add_hline(y=0, line_dash='dash')\nfig.update_layout(\n    xaxis_tickangle=-45,\n    yaxis_title='Gap (Positive = Market expects more)',\n    font=dict(size=13),\n    height=500,\n    plot_bgcolor='white',\n)\nfig.write_html(\"figures/skill_gap_chart.html\")\nplt.savefig(\"figures/skill_gap_chart.svg\", format='svg', bbox_inches='tight')\n\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\nThis bar chart compares our team’s average proficiency in key data-related skills against job market expectations. Skills with positive values (like communication and SQL) indicate areas where market demand exceeds our current capabilities. On the other hand, negative values highlight areas where the team is ahead or closely aligned with market needs. Notably, skills like Python, cloud computing, and project management show the largest gaps, suggesting priority areas for upskilling."
  }
]