[
  {
    "objectID": "analytics_model.html",
    "href": "analytics_model.html",
    "title": "analytcis model",
    "section": "",
    "text": "Code\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import adjusted_rand_score\neda = pd.read_csv(\"data/eda_data.csv\")\n\n\n\n\nCode\n\neda = pd.read_csv(\"data/eda_data.csv\")\n\nfeatures = eda[['SALARY', 'MAX_YEARS_EXPERIENCE', 'MIN_YEARS_EXPERIENCE']].copy()\n\nfor col in ['MAX_YEARS_EXPERIENCE', 'MIN_YEARS_EXPERIENCE', 'SALARY']:\n    features[col] = pd.to_numeric(features[col], errors='coerce')\n\nfeatures = features.dropna()\n\nscaler = StandardScaler()\nX = scaler.fit_transform(features)\n\nkmeans = KMeans(n_clusters=4, random_state=688)\neda.loc[features.index, 'Cluster'] = kmeans.fit_predict(X)\n\ntrue_labels = eda.loc[features.index, 'SOC_2021_4_NAME']\ntrue_labels_encoded = LabelEncoder().fit_transform(true_labels)\n\nari = adjusted_rand_score(true_labels_encoded, eda.loc[features.index, 'Cluster'])\n\n\n\n\nCode\nimport plotly.express as px\nplt.figure(figsize=(10, 6))\n\n# Scatter plot of salary vs. max experience, colored by cluster\nsns.scatterplot(\n    x=features['SALARY'],\n    y=features['MAX_YEARS_EXPERIENCE'],\n    hue=eda.loc[features.index, 'Cluster'],\n    palette='Set2',\n    s=40,\n    edgecolor='white',\n    linewidth=0.5\n)\n\n# Plot centroids\ncentroids = kmeans.cluster_centers_\nplt.scatter(\n    centroids[:, 0] * X.std(axis=0)[0] + X.mean(axis=0)[0],\n    centroids[:, 1] * X.std(axis=0)[1] + X.mean(axis=0)[1],\n    marker='X',\n    s=200,\n    c='black',\n    label='Centroids'\n)\n\n# Titles and labels\nplt.title(\"KMeans Clustering by Salary and Max Years Experience\", fontsize=16)\nplt.xlabel(\"Salary\", fontsize=12)\nplt.ylabel(\"Max Years Experience\", fontsize=12)\nplt.legend(title='Cluster', loc='upper right')\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom IPython.display import HTML\n\n# 1) Build the DataFrame\ndf_plot = features.copy()\ndf_plot['Cluster'] = eda.loc[features.index, 'Cluster']\n\n# 2) Compute centroids in original units\ncentroids = kmeans.cluster_centers_\ncentroids_x = centroids[:, 0] * X.std(axis=0)[0] + X.mean(axis=0)[0]\ncentroids_y = centroids[:, 1] * X.std(axis=0)[1] + X.mean(axis=0)[1]\n\n# 3) Create an interactive Plotly Figure\nfig = px.scatter(\n    df_plot,\n    x='SALARY',\n    y='MAX_YEARS_EXPERIENCE',\n    color='Cluster',\n    title=\"KMeans Clustering by Salary and Max Years Experience\",\n    labels={\n        'SALARY': 'Salary',\n        'MAX_YEARS_EXPERIENCE': 'Max Years Experience',\n        'Cluster': 'Cluster'\n    },\n    width=800,\n    height=500,\n)\n\n# 4) Add centroid traces\nfig.add_trace(\n    go.Scatter(\n        x=centroids_x,\n        y=centroids_y,\n        mode='markers',\n        marker=dict(symbol='x', size=18, color='black', line=dict(width=2, color='white')),\n        name='Centroids'\n    )\n)\n\n# 5) Render the full HTML and embed it\nhtml = fig.to_html(include_plotlyjs='cdn')\nHTML(html)\n\n\n\n\n\n                            \n                                            \n\n\n\n\nHere we have 4 cluster groups. Group 0, which represent as green have lower salary, mostly under 150k, and max years experience in 2-5 years, it is likely Likely junior to mid-level employees with moderate pay. Group 1 with orange, has medium to high salary, wide range from $100k–$500k and with narrow range ~3 years, they are suggests specialized or high-paying roles with short experience — possibly fast-track promotions or high-demand fields. cluster 2 are low salary and experience from 0-4 years, they are clearly entry level employee. cluster 3 has medium salary, mostly under 200k with higher experiences, like 6-13 eyars. They probably are senior professionals with more experience but not the highest salaries.\n\n\nCode\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nfeatures1 = eda[['MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE']].copy()\n\nfor col in features.columns:\n    features[col] = pd.to_numeric(features[col], errors='coerce')\n\nfeatures = features.dropna()\n\nX = features\ny = eda.loc[X.index, 'SALARY']\n\nX = X.dropna()\ny = y.loc[X.index]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=688)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\n\n\n\n\nCode\nplt.figure(figsize =(10,6))\nplt.scatter(y_test, y_pred, alpha = 0.6, color = 'skyblue')\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', lw=2)\nplt.xlabel(\"Actual Salary\")\nplt.ylabel(\"Predicted Salary\")\nplt.title(\"Actual vs Predicted Salary (Multiple Regression)\")\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThis plot shows the Actual vs. Predicted Salary using a multiple linear regression model. The blue dots represent individual predictions, and the red dashed line is the ideal line where predicted = actual. Since most points lie very close to the red line, it means your model predicts salary very accurately, with minimal error and strong linear fit — likely reflected in a high R² score near 1.0."
  },
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skill Gap Analysis",
    "section": "",
    "text": "Code\nimport pandas as pd\ndf= pd.read_csv(\"data/eda_data.csv\")\n\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[1], line 2\n      1 import pandas as pd\n----&gt; 2 df= pd.read_csv(\"data/eda_data.csv\")\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1026, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n   1013 kwds_defaults = _refine_defaults_read(\n   1014     dialect,\n   1015     delimiter,\n   (...)\n   1022     dtype_backend=dtype_backend,\n   1023 )\n   1024 kwds.update(kwds_defaults)\n-&gt; 1026 return _read(filepath_or_buffer, kwds)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:620, in _read(filepath_or_buffer, kwds)\n    617 _validate_names(kwds.get(\"names\", None))\n    619 # Create the parser.\n--&gt; 620 parser = TextFileReader(filepath_or_buffer, **kwds)\n    622 if chunksize or iterator:\n    623     return parser\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1620, in TextFileReader.__init__(self, f, engine, **kwds)\n   1617     self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n   1619 self.handles: IOHandles | None = None\n-&gt; 1620 self._engine = self._make_engine(f, self.engine)\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1880, in TextFileReader._make_engine(self, f, engine)\n   1878     if \"b\" not in mode:\n   1879         mode += \"b\"\n-&gt; 1880 self.handles = get_handle(\n   1881     f,\n   1882     mode,\n   1883     encoding=self.options.get(\"encoding\", None),\n   1884     compression=self.options.get(\"compression\", None),\n   1885     memory_map=self.options.get(\"memory_map\", False),\n   1886     is_text=is_text,\n   1887     errors=self.options.get(\"encoding_errors\", \"strict\"),\n   1888     storage_options=self.options.get(\"storage_options\", None),\n   1889 )\n   1890 assert self.handles is not None\n   1891 f = self.handles.handle\n\nFile /opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pandas/io/common.py:873, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    868 elif isinstance(handle, str):\n    869     # Check whether the filename is to be opened in binary mode.\n    870     # Binary mode does not support 'encoding' and 'newline'.\n    871     if ioargs.encoding and \"b\" not in ioargs.mode:\n    872         # Encoding\n--&gt; 873         handle = open(\n    874             handle,\n    875             ioargs.mode,\n    876             encoding=ioargs.encoding,\n    877             errors=errors,\n    878             newline=\"\",\n    879         )\n    880     else:\n    881         # Binary mode\n    882         handle = open(handle, ioargs.mode)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'data/eda_data.csv'"
  },
  {
    "objectID": "skill_gap_analysis.html#group-11-skill",
    "href": "skill_gap_analysis.html#group-11-skill",
    "title": "Skill Gap Analysis",
    "section": "Group 11 Skill",
    "text": "Group 11 Skill\n\n\nCode\nimport pandas as pd\n\nskills_data = {\n    \"Name\": [\"Binderiya\", \"Pranjul\", \"Pratham\", \"Panyang\"],\n    \"Python\": [4, 4, 5, 3],\n    \"SQL\": [4, 4, 5, 4],\n    \"Machine Learning\": [2, 3, 2, 2],\n    \"PySpark\": [3, 3, 3, 3],\n    \"Excel\": [4, 5, 5, 4],\n    \"Data Visualization\": [5, 5, 3, 3],\n    \"Power Bi/ Tableau\": [4, 5, 3, 4],\n    \"Version Control Git\": [4, 4, 3, 3],\n    \"ETL/Data pipeline\": [3, 2, 1, 2],\n    \"Communication\": [4, 4, 5, 3],\n    \"Project Management\": [5, 5, 5, 3],\n    \"Cloud Computing\": [4, 4, 2, 2]\n}\n\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\ndf_skills\n\n\n\n\n\n\n\n\n\nPython\nSQL\nMachine Learning\nPySpark\nExcel\nData Visualization\nPower Bi/ Tableau\nVersion Control Git\nETL/Data pipeline\nCommunication\nProject Management\nCloud Computing\n\n\nName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBinderiya\n4\n4\n2\n3\n4\n5\n4\n4\n3\n4\n5\n4\n\n\nPranjul\n4\n4\n3\n3\n5\n5\n5\n4\n2\n4\n5\n4\n\n\nPratham\n5\n5\n2\n3\n5\n3\n3\n3\n1\n5\n5\n2\n\n\nPanyang\n3\n4\n2\n3\n4\n3\n4\n3\n2\n3\n3\n2\n\n\n\n\n\n\n\n\n\nCode\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(7, 4))\nsns.heatmap(df_skills, annot=True, cmap=\"YlGnBu\", linewidths=0.5)\nplt.title(\"Team Skill Levels Heatmap\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport plotly.graph_objects as go\nfrom IPython.display import IFrame\nfig = go.Figure()\n\nfor name in df_skills.index:\n    values = df_skills.loc[name].tolist()\n    values += values[:1]  # close the loop\n    fig.add_trace(go.Scatterpolar(\n        r=values,\n        theta=df_skills.columns.tolist() + [df_skills.columns[0]],\n        fill='toself',\n        name=name\n    ))\n\nfig.update_layout(\n    polar=dict(radialaxis=dict(visible=True, range=[0, 5])),\n    showlegend=True,\n    title='Team Skills Radar Chart'\n)\nfig.write_html(\"figures/skills_radar_chart.html\")\nIFrame(src=\"figures/skills_radar_chart.html\", width='100%', height=500)\nfig.show()\n\n\n        \n        \n        \n\n\n                            \n                                            \n\n\nFrom this radar chart visualization we can see that our team has a lot of room for improvement for skills like PySpark and Machine Learning. Also we can see that not a lot of our team mates are confident in their skills in Cloud Computing and ETL."
  },
  {
    "objectID": "skill_gap_analysis.html#top-skills",
    "href": "skill_gap_analysis.html#top-skills",
    "title": "Skill Gap Analysis",
    "section": "Top Skills",
    "text": "Top Skills\n\n\nCode\nkeywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n            'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n            'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n            'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n\nmatch = lambda col: df[col].str.contains('|'.join(keywords), case=False, na=False)\n\ndf['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n             | match('SKILLS_NAME') \\\n             | match('SPECIALIZED_SKILLS_NAME') \ndf['DATA_ANALYST_JOB'].value_counts()\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 8\n      1 keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n      2             'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n      3             'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n      4             'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n      6 match = lambda col: df[col].str.contains('|'.join(keywords), case=False, na=False)\n----&gt; 8 df['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n      9              | match('SKILLS_NAME') \\\n     10              | match('SPECIALIZED_SKILLS_NAME') \n     11 df['DATA_ANALYST_JOB'].value_counts()\n\nCell In[5], line 6, in &lt;lambda&gt;(col)\n      1 keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n      2             'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n      3             'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n      4             'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n----&gt; 6 match = lambda col: df[col].str.contains('|'.join(keywords), case=False, na=False)\n      8 df['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n      9              | match('SKILLS_NAME') \\\n     10              | match('SPECIALIZED_SKILLS_NAME') \n     11 df['DATA_ANALYST_JOB'].value_counts()\n\nNameError: name 'df' is not defined\n\n\n\n\n\nCode\nimport ast\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n# Safely apply literal_eval only to non-null values\ndf['SKILLS'] = df['SKILLS_NAME'].apply(lambda x: ast.literal_eval(x) if pd.notnull(x) else [])\n\n\ndata_skills = df[df['DATA_ANALYST_JOB']]['SKILLS'].explode().value_counts().reset_index()\ndata_skills.columns = ['Skill', 'Count']\n\nfig = px.bar(data_skills, x='Skill', y='Count',\n             title=\"Top Skills\",\n             labels={'Skill': 'Skill Name', 'Count': 'Frequency'},\n             color='Skill')\ndf_skills.index = df_skills.index.str.strip()\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 7\n      4 import plotly.express as px\n      6 # Safely apply literal_eval only to non-null values\n----&gt; 7 df['SKILLS'] = df['SKILLS_NAME'].apply(lambda x: ast.literal_eval(x) if pd.notnull(x) else [])\n     10 data_skills = df[df['DATA_ANALYST_JOB']]['SKILLS'].explode().value_counts().reset_index()\n     11 data_skills.columns = ['Skill', 'Count']\n\nNameError: name 'df' is not defined\n\n\n\n\n\nCode\nfrom collections import defaultdict\n\n# Lowercase everything\nteam_skills = [s.lower().strip() for s in df_skills.columns]\njob_demand_raw = data_skills.copy()\njob_demand_raw['Skill'] = job_demand_raw['Skill'].str.lower().str.strip()\n\n# New dict to map cleaned team skill to total count from job postings\nskill_demand_map = defaultdict(int)\n\nfor _, row in job_demand_raw.iterrows():\n    skill_in_posting = row['Skill']\n    count = row['Count']\n    for team_skill in team_skills:\n        if team_skill in skill_in_posting:\n            skill_demand_map[team_skill] += count\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[7], line 5\n      3 # Lowercase everything\n      4 team_skills = [s.lower().strip() for s in df_skills.columns]\n----&gt; 5 job_demand_raw = data_skills.copy()\n      6 job_demand_raw['Skill'] = job_demand_raw['Skill'].str.lower().str.strip()\n      8 # New dict to map cleaned team skill to total count from job postings\n\nNameError: name 'data_skills' is not defined\n\n\n\n\n\nCode\nteam_skills = [s.strip().lower() for s in df_skills.columns]\nprint(\"Team skills:\", team_skills)\nprint(job_demand_raw['Skill'].head(10).tolist())\nfor skill_text in job_demand_raw['Skill'].head(10):\n    for team_skill in team_skills:\n        if team_skill in skill_text:\n            print(f\" '{team_skill}' found in: '{skill_text}'\")\n\n\nTeam skills: ['python', 'sql', 'machine learning', 'pyspark', 'excel', 'data visualization', 'power bi/ tableau', 'version control git', 'etl/data pipeline', 'communication', 'project management', 'cloud computing']\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 3\n      1 team_skills = [s.strip().lower() for s in df_skills.columns]\n      2 print(\"Team skills:\", team_skills)\n----&gt; 3 print(job_demand_raw['Skill'].head(10).tolist())\n      4 for skill_text in job_demand_raw['Skill'].head(10):\n      5     for team_skill in team_skills:\n\nNameError: name 'job_demand_raw' is not defined\n\n\n\n\n\nCode\nfor _, row in job_demand_raw.iterrows():\n    skill_text = row['Skill']\n    count = row['Count']\n    for team_skill in team_skills:\n        if team_skill in skill_text:  # no regex, just substring\n            skill_demand_map[team_skill] += count\n\njob_demand = pd.Series(skill_demand_map)\nprint(job_demand)\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 1\n----&gt; 1 for _, row in job_demand_raw.iterrows():\n      2     skill_text = row['Skill']\n      3     count = row['Count']\n\nNameError: name 'job_demand_raw' is not defined\n\n\n\n\n\nCode\njob_demand = pd.Series(skill_demand_map)\njob_demand.name = \"Count\"\nteam_avg = df_skills.mean()\nteam_avg.index = team_avg.index.str.strip().str.lower() \n# Now match only overlapping skills\ncommon_skills = job_demand.index.intersection(team_avg.index)\nteam_avg = team_avg[common_skills]\njob_demand = job_demand[common_skills]\n\n# Normalize job demand\njob_demand_normalized = 5 * (job_demand / job_demand.max())\njob_demand_normalized.name = \"Job Demand (Normalized)\"\n\n# Combine\ncomparison_df = pd.concat([team_avg, job_demand_normalized], axis=1)\ncomparison_df.columns = [\"Team Average Skill\", \"Job Demand (Normalized)\"]\ncomparison_df[\"Skill Gap\"] = comparison_df[\"Job Demand (Normalized)\"] - comparison_df[\"Team Average Skill\"]\ncomparison_df.sort_values(\"Skill Gap\", ascending=False, inplace=True)\n\ncomparison_df\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 job_demand = pd.Series(skill_demand_map)\n      2 job_demand.name = \"Count\"\n      3 team_avg = df_skills.mean()\n\nNameError: name 'skill_demand_map' is not defined\n\n\n\n\n\nCode\ncomparison_df = comparison_df.reset_index().rename(columns={\"index\": \"Skill\"})\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 comparison_df = comparison_df.reset_index().rename(columns={\"index\": \"Skill\"})\n\nNameError: name 'comparison_df' is not defined\n\n\n\n\n\nCode\nimport plotly.express as px\n\nfig = px.bar(\n    comparison_df,\n    x='Skill',\n    y='Skill Gap',\n    color='Skill Gap',\n    color_continuous_scale='RdBu_r',\n    title='Skill Gaps: Job Market Expectations vs. Team Capability',\n    labels={'Skill Gap': 'Gap (Job Demand - Team Skill)', 'Skill': 'Skill'},\n)\n\nfig.add_hline(y=0, line_dash='dash')\nfig.update_layout(\n    xaxis_tickangle=-45,\n    yaxis_title='Gap (Positive = Market expects more)',\n    font=dict(size=13),\n    height=500,\n    plot_bgcolor='white',\n)\nfig.write_html(\"figures/skill_gap_chart.html\")\nfig.show()\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[12], line 4\n      1 import plotly.express as px\n      3 fig = px.bar(\n----&gt; 4     comparison_df,\n      5     x='Skill',\n      6     y='Skill Gap',\n      7     color='Skill Gap',\n      8     color_continuous_scale='RdBu_r',\n      9     title='Skill Gaps: Job Market Expectations vs. Team Capability',\n     10     labels={'Skill Gap': 'Gap (Job Demand - Team Skill)', 'Skill': 'Skill'},\n     11 )\n     13 fig.add_hline(y=0, line_dash='dash')\n     14 fig.update_layout(\n     15     xaxis_tickangle=-45,\n     16     yaxis_title='Gap (Positive = Market expects more)',\n   (...)\n     19     plot_bgcolor='white',\n     20 )\n\nNameError: name 'comparison_df' is not defined\n\n\n\nThis bar chart compares our team’s average proficiency in key data-related skills against job market expectations. Skills with positive values (like communication and SQL) indicate areas where market demand exceeds our current capabilities. On the other hand, negative values highlight areas where the team is ahead or closely aligned with market needs. Notably, skills like Python, cloud computing, and project management show the largest gaps, suggesting priority areas for upskilling."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trends in Data Science & Business Analytics!",
    "section": "",
    "text": "Welcome to our deep dive into the evolving landscape of Data Science and Business Analytics in the United States. As industries across the nation increasingly rely on data-driven insights, the role of data science and analytics has become paramount in shaping business strategies, optimizing operations, and driving innovation.\nThe rise of artificial intelligence (AI) is reshaping the landscape of data science and business analytics in the United States, creating both opportunities and challenges for workers and businesses alike. As AI continues to evolve, it has sparked widespread concern over job displacement. According to a recent report from the World Economic Forum, 86% of workers express concerns about AI potentially leading to job losses, with predictions of significant industry shifts occurring within the next two to five years (Samuels (2024)). However, business leaders emphasize that AI is not merely a tool for job replacement—it’s a transformative force that is changing the nature of work itself. For instance, Rakuten’s partnership with OpenAI to create an internal version of ChatGPT is helping employees work more efficiently, focusing on higher-level tasks rather than being displaced by technology (Samuels (2024)).\n\n\n\nData Science Image\n\n\nOne key trend in 2024 is the growing demand for AI-related skills across various industries. A recent Gartner report highlights that many organizations are significantly increasing their investments in AI, with companies projected to spend an average of $2.5 million on AI integration in 2024 (Gartner (2024)). This investment is reshaping job descriptions and workforce requirements, as roles now demand proficiency in AI tools. For example, in software development, GitHub Copilot has been shown to increase programmers’ efficiency by 55%, enabling them to focus on complex problem-solving rather than repetitive coding tasks (GitHub (2023)). As a result, professionals who upskill and learn to work alongside AI will have better career prospects in the future.\n\n\n\nData Science Image\n\n\nThe career outlook for business analytics and data science professionals remains optimistic, as companies increasingly look to combine AI with human decision-making to enhance productivity and innovation. Industry leaders, including Bev White, CEO of Nash Squared, emphasize that AI is not about eliminating jobs, but rather reshaping them to make work more productive and meaningful (White (2024)). Similarly, PepsiCo’s CIO, Nigel Richardson, believes that while some jobs will be replaced, AI will ultimately create more opportunities than it eliminates (Richardson (2024)). This aligns with a McKinsey report that forecasts AI could generate up to $13 trillion in additional global GDP by 2030, creating new job opportunities in data science, business analytics, and other technology-related fields (Company (2023)).\nThis website explores the latest trends, key developments, and future directions in Data Science and Business Analytics in the U.S. We delve into emerging technologies, the growing demand for skilled professionals, and the impact these fields are having on various industries. Our aim is to provide you with valuable insights into how data science is shaping the future of business and the economy.\nJoin us as we explore:\n\nThe role of machine learning, AI, and automation in business analytics.\nHow data-driven decisions are driving competitive advantages across industries.\nThe growing importance of data ethics and privacy concerns.\nKey skills and tools shaping the future of data professionals.\n\n\n\n\n\nReferences\n\nCompany, M. &. (2023): “The Economic Potential of Generative AI: The Next Productivity Frontier,”https://www.mckinsey.com/capabilities/mckinsey-digital/our-insights/the-economic-potential-of-generative-ai-the-next-productivity-frontier.\n\n\nGartner. (2024): “Marketing Budgets: Benchmarks for CMOs in the Era of Less,”https://www.gartner.com/en/marketing/topics/marketing-budget.\n\n\nGitHub. (2023): “GitHub Copilot: Your AI Pair Programmer,”https://github.com/features/copilot.\n\n\nRichardson, N. (2024): “CIO Interview: Nigel Richardson, European CIO, PepsiCo,”https://www.computerweekly.com/news/366570412/CIO-interview-Nigel-Richardson-European-CIO-PepsiCo.\n\n\nSamuels, M. (2024): “AI’s Employment Impact: 86% of Workers Fear Job Losses, but Here’s Some Good News,”https://www.zdnet.com/article/ai-employment-impact-86-of-workers-fear-job-losses-but-heres-some-good-news/.\n\n\nWhite, B. (2024): “The Future of Work: How AI Is Reshaping Careers,”https://www.harveynash.co.uk/team/bev-white."
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "This page presents our data cleaning and prepping part.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\ndf = pd.read_csv(\"./data/lightcast_job_postings.csv\")\n\ncolumns_to_keep = [\n    'COMPANY', 'LOCATION', 'POSTED', 'MIN_EDULEVELS_NAME', 'MAX_EDULEVELS_NAME',\n    'MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE', 'TITLE', 'SKILLS',\n    'SPECIALIZED_SKILLS', 'CERTIFICATIONS', 'COMMON_SKILLS', 'SOFTWARE_SKILLS',\n    'SOC_2021_4_NAME', 'NAICS_2022_6', 'NAICS2_NAME', 'REMOTE_TYPE_NAME',\n    'SALARY', 'TITLE_NAME', 'SKILLS_NAME', 'SPECIALIZED_SKILLS_NAME'\n]\neda_data = df[columns_to_keep]\n\n\n\n\nCode\nmsno.heatmap(eda_data)\nplt.title(\"Missing Values Heatmap\")\nplt.savefig(\"figures/missingno_heatmap.svg\", format='svg', bbox_inches='tight')\nplt.show()\n\n\n\n\n\n\n\n\n\nThis heatmap shows how much data is missing in each column. Most columns have very little missing data (less than 10%), which is good. A few like MAX_YEARS_EXPERIENCE or MIN_EDULEVELS_NAME have a bit more, but still manageable. Since the missing values aren’t strongly related to each other, we can clean each column separately — maybe by filling in with the median or most common value.\n\n\nCode\nif \"SALARY\" in eda_data.columns:\n    eda_data[\"SALARY\"].fillna(eda_data[\"SALARY\"].median(), inplace=True)\nelse:\n    print(\"Warning: 'SALARY' column not found in dataframe!\")\n\nif \"COMPANY\" in eda_data.columns:\n    eda_data[\"COMPANY\"].fillna(\"Unknown\", inplace=True)\nelse:\n    print(\"Warning: 'COMPANY' column not found in dataframe!\")\n\n    # Fill numeric columns with mean\nnum_cols = eda_data.select_dtypes(include='number').columns\nfor col in num_cols:\n    if eda_data[col].isnull().sum() &gt; 0:\n        eda_data[col].fillna(eda_data[col].mean(), inplace=True)\n\n# Fill categorical columns with mode\ncat_cols = eda_data.select_dtypes(include='object').columns\nfor col in cat_cols:\n    if eda_data[col].isnull().sum() &gt; 0:\n        eda_data[col].fillna(eda_data[col].mode()[0], inplace=True)\n\neda_data.dropna(thresh=len(eda_data) * 0.5, axis=1, inplace=True)\n\n\n# delete duplicates\neda_data = eda_data.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"])"
  },
  {
    "objectID": "rm_model.html",
    "href": "rm_model.html",
    "title": "Random Forest Classification for ML/Data Science Requirement",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\"data/lightcast_job_postings.csv\")\ndf.columns\n\nIndex(['ID', 'LAST_UPDATED_DATE', 'LAST_UPDATED_TIMESTAMP', 'DUPLICATES',\n       'POSTED', 'EXPIRED', 'DURATION', 'SOURCE_TYPES', 'SOURCES', 'URL',\n       ...\n       'NAICS_2022_2', 'NAICS_2022_2_NAME', 'NAICS_2022_3',\n       'NAICS_2022_3_NAME', 'NAICS_2022_4', 'NAICS_2022_4_NAME',\n       'NAICS_2022_5', 'NAICS_2022_5_NAME', 'NAICS_2022_6',\n       'NAICS_2022_6_NAME'],\n      dtype='object', length=131)\n\n\n\nml_keywords = [\"machine learning\", \"data science\", \"ai\", \"artificial intelligence\", \"deep learning\", \"data scientist\"]\n\ndef requires_ml(skills):\n    if pd.isnull(skills):\n        return 0\n    skills = skills.lower()\n    return int(any(kw in skills for kw in ml_keywords))\n\ndf[\"REQUIRES_ML\"] = df[\"SKILLS_NAME\"].apply(requires_ml)\n\n\nfeatures = [\"TITLE\", \"SOC_2021_4_NAME\", \"NAICS2_NAME\", \"MIN_EDULEVELS_NAME\", \"MIN_YEARS_EXPERIENCE\"]\ntarget = \"REQUIRES_ML\"\n\ndf = df[features + [target, 'BODY']].dropna()\n\n\nfrom sklearn.preprocessing import LabelEncoder\n\ndf_encoded = df.copy()\nlabel_encoders = {}\n\nfor col in features:\n    if df_encoded[col].dtype == \"object\":\n        le = LabelEncoder()\n        df_encoded[col] = le.fit_transform(df_encoded[col])\n        label_encoders[col] = le\n\n\nfrom sklearn.model_selection import train_test_split\n\nX = df_encoded[features]\ny = df_encoded[target]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.76      0.76      0.76      5257\n           1       0.72      0.72      0.72      4614\n\n    accuracy                           0.74      9871\n   macro avg       0.74      0.74      0.74      9871\nweighted avg       0.74      0.74      0.74      9871\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 5))\nplt.barh(features, rf.feature_importances_)\nplt.xlabel(\"Importance\")\nplt.title(\"Feature Importance - ML Role Classification\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Cleaned job descriptions\ndf['BODY_clean'] = df['BODY'].fillna(\"\").str.lower()\n\n# Target\ny = df['REQUIRES_ML']  # this should be a binary 1/0 column\n\n# TF-IDF vectorization\ntfidf = TfidfVectorizer(max_features=5000, stop_words='english')\nX = tfidf.fit_transform(df['BODY_clean'])\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y)\n\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(classification_report(y_test, y_pred))\n\n              precision    recall  f1-score   support\n\n           0       0.91      0.94      0.92      6644\n           1       0.92      0.89      0.90      5694\n\n    accuracy                           0.91     12338\n   macro avg       0.91      0.91      0.91     12338\nweighted avg       0.91      0.91      0.91     12338\n\n\n\n\nimport numpy as np\n\nimportances = model.feature_importances_\ntop_idx = np.argsort(importances)[-20:]\ntop_words = [tfidf.get_feature_names_out()[i] for i in top_idx]\n\nplt.barh(top_words, importances[top_idx])\nplt.title(\"Top Words for ML Role Classification\")\nplt.xlabel(\"Importance\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n# Generate confusion matrix\ncm = confusion_matrix(y_test, y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\n\n# Plot\ndisp.plot(cmap=\"Blues\")\nplt.title(\"Confusion Matrix - ML Role Classification\")\nplt.show()\n\n\n\n\n\n\n\n\nWe selected a combination of structured and unstructured features to predict whether a job role requires Machine Learning or Data Science. Structured features such as TITLE, SOC_2021_4_NAME, NAICS2_NAME, MIN_EDULEVELS_NAME, and MIN_YEARS_EXPERIENCE were chosen based on domain relevance—these fields reflect the role’s function, industry, required education, and experience level, all of which can signal ML-related requirements. Additionally, we included the job description BODY text, applying TF-IDF vectorization to extract key terms. This allowed the model to learn from nuanced language patterns within postings. Feature importance and performance metrics confirm that both structured metadata and text data contribute meaningfully to classification accuracy."
  }
]