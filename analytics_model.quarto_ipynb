{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Analytics Model\"\n",
        "format:\n",
        "  html:\n",
        "    embed-resources: true        \n",
        "    toc: true\n",
        "    code-fold: true\n",
        "    math-method: mathjax         \n",
        "    mathjax-url: \"https://cdn.jsdelivr.net/npm/mathjax@2.7.9/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\n",
        "jupyter: python3\n",
        "execute:\n",
        "  working-directory: project\n",
        "  echo: true\n",
        "  warning: false\n",
        "  error: true\n",
        "---"
      ],
      "id": "c16aefba"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import adjusted_rand_score\n",
        "eda = pd.read_parquet(\"data/eda.parquet\")"
      ],
      "id": "19e82e7e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "features = eda[['SALARY', 'MAX_YEARS_EXPERIENCE', 'MIN_YEARS_EXPERIENCE']].copy()\n",
        "\n",
        "for col in ['MAX_YEARS_EXPERIENCE', 'MIN_YEARS_EXPERIENCE', 'SALARY']:\n",
        "    features[col] = pd.to_numeric(features[col], errors='coerce')\n",
        "\n",
        "features = features.dropna()\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(features)\n",
        "\n",
        "kmeans = KMeans(n_clusters=4, random_state=688)\n",
        "eda.loc[features.index, 'Cluster'] = kmeans.fit_predict(X)\n",
        "\n",
        "true_labels = eda.loc[features.index, 'SOC_2021_4_NAME']\n",
        "true_labels_encoded = LabelEncoder().fit_transform(true_labels)\n",
        "\n",
        "ari = adjusted_rand_score(true_labels_encoded, eda.loc[features.index, 'Cluster'])"
      ],
      "id": "64d2007b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "from IPython.display import HTML\n",
        "import numpy as np\n",
        "\n",
        "# 1) Build the DataFrame\n",
        "df_plot = features.copy()\n",
        "df_plot['Cluster'] = eda.loc[features.index, 'Cluster']\n",
        "\n",
        "# 1.1) Create a log salary column for better scaling\n",
        "df_plot['Log_SALARY'] = np.log1p(df_plot['SALARY'])  # log(1+salary), avoid log(0)\n",
        "\n",
        "# 2) Create an interactive Plotly Figure\n",
        "fig = px.scatter(\n",
        "    df_plot,\n",
        "    x='Log_SALARY',  # ðŸ‘ˆ use log salary instead of salary\n",
        "    y='MAX_YEARS_EXPERIENCE',\n",
        "    color='Cluster',\n",
        "    title=\"KMeans Clustering by Log(Salary) and Max Years Experience\",\n",
        "    labels={\n",
        "        'Log_SALARY': 'Log(Salary)',\n",
        "        'MAX_YEARS_EXPERIENCE': 'Max Years Experience',\n",
        "        'Cluster': 'Cluster'\n",
        "    },\n",
        "    width=800,\n",
        "    height=600,\n",
        ")\n",
        "\n",
        "fig"
      ],
      "id": "7f5770c3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<iframe\n",
        "  src=\"/figures/analytics_plot1.html\"\n",
        "  width=\"100%\"\n",
        "  width=\"100%\"\n",
        "  style=\"border:none; height:90vh;\n",
        "></iframe>\n",
        "\n",
        "Here we have 4 cluster groups. Group 0, which represent as green have lower salary, mostly under 150k, and max years experience in 2-5 years, it is likely Likely junior to mid-level employees with moderate pay. Group 1 with orange, has medium to high salary, wide range from $100kâ€“$500k and with narrow range ~3 years, they are suggests specialized or high-paying roles with short experience â€” possibly fast-track promotions or high-demand fields. cluster 2 are low salary and experience from 0-4 years, they are clearly entry level employee. cluster 3 has medium salary, mostly under 200k with higher experiences, like 6-13 eyars. They probably are senior professionals with more experience but not the highest salaries. \n"
      ],
      "id": "c1c39cc1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Prepare features & target\n",
        "features = eda[['MIN_YEARS_EXPERIENCE', 'MAX_YEARS_EXPERIENCE']].apply(pd.to_numeric, errors='coerce')\n",
        "features = features.dropna()\n",
        "X = features\n",
        "y = eda.loc[X.index, 'SALARY']\n",
        "\n",
        "# Train/test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=688)\n",
        "\n",
        "# Fit model & predict\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Metrics (optional, but handy)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "print(f\"MSE: {mse:.2f}, RÂ²: {r2:.3f}\")\n",
        "\n",
        "# Define min/max for the identity line\n",
        "min_val = y_test.min()\n",
        "max_val = y_test.max()"
      ],
      "id": "baba337c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Apply log transform\n",
        "y_test_log = np.log1p(y_test)\n",
        "y_pred_log = np.log1p(y_pred)\n",
        "\n",
        "# Plot\n",
        "fig = go.Figure([\n",
        "    go.Scatter(\n",
        "        x=y_test_log,\n",
        "        y=y_pred_log,\n",
        "        mode='markers',\n",
        "        marker=dict(color='skyblue', opacity=0.6),\n",
        "        name='Predicted vs Actual (Log Scale)'\n",
        "    ),\n",
        "    go.Scatter(\n",
        "        x=[min(y_test_log), max(y_test_log)],\n",
        "        y=[min(y_test_log), max(y_test_log)],\n",
        "        mode='lines',\n",
        "        line=dict(color='red', dash='dash'),\n",
        "        name='Ideal Fit'\n",
        "    )\n",
        "])\n",
        "\n",
        "fig.update_layout(\n",
        "    autosize=True,\n",
        "    height=400,\n",
        "    title=\"Predicted vs Actual Salary (Log Scale)\",\n",
        "    xaxis_title=\"Actual Log(Salary)\",\n",
        "    yaxis_title=\"Predicted Log(Salary)\",\n",
        "    margin=dict(l=20, r=20, t=50, b=20)\n",
        ")\n",
        "\n",
        "fig.write_html(\n",
        "    \"figures/analytics_plot2.html\",\n",
        "    full_html=False,\n",
        "    include_plotlyjs=\"cdn\",\n",
        "    config={\"responsive\": True}\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "ee0cdceb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<iframe\n",
        "  src=\"/figures/analytics_plot2.html\"\n",
        "  width=\"100%\"\n",
        "  style=\"border:none; height:90vh;\n",
        "></iframe>\n",
        "\n",
        "This plot shows the Actual vs. Predicted Salary using a multiple linear regression model. The blue dots represent individual predictions, and the red dashed line is the ideal line where predicted = actual. Since most points lie very close to the red line, it means your model predicts salary very accurately, with minimal error and strong linear fit â€” likely reflected in a high RÂ² score near 1.0.\n"
      ],
      "id": "f62ef623"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}