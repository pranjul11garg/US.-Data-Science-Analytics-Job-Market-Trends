{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Exploratory Data Analytics\n",
        "jupyter: python3\n",
        "execute:\n",
        "  echo: true\n",
        "  warning: false\n",
        "  error: true\n",
        "  working directory: project\n",
        "format:\n",
        "  html:\n",
        "    self-contained: true       # bundle everything into one file\n",
        "    embed-resources: true      # include Plotly JS + widget state\n",
        "toc: true\n",
        "code-fold: true\n",
        "---"
      ],
      "id": "587925c2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "eda = pd.read_parquet(\"data/eda.parquet\")"
      ],
      "id": "4ca6d28d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# identifying data analyst jobs by keyword searching\n",
        "keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n",
        "            'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n",
        "            'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n",
        "            'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n",
        "\n",
        "match = lambda col: eda[col].str.contains('|'.join(keywords), case=False, na=False)\n",
        "\n",
        "eda['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n",
        "             | match('SKILLS_NAME') \\\n",
        "             | match('SPECIALIZED_SKILLS_NAME') \n",
        "eda['DATA_ANALYST_JOB'].value_counts()"
      ],
      "id": "f40c8d2b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "df_grouped = (\n",
        "    eda\n",
        "    .groupby(['DATA_ANALYST_JOB','NAICS2_NAME'])\n",
        "    .size()\n",
        "    .reset_index(name='Job_Count')\n",
        ")\n",
        "\n",
        "short_names = {\n",
        "    'Professional, Scientific, and Technical Services': 'Prof. Services',\n",
        "    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n",
        "    'Health Care and Social Assistance': 'Healthcare',\n",
        "    'Finance and Insurance': 'Finance',\n",
        "    'Information': 'Info Tech',\n",
        "    'Educational Services': 'Education',\n",
        "    'Manufacturing': 'Manufacturing',\n",
        "    'Retail Trade': 'Retail',\n",
        "    'Accommodation and Food Services': 'Hospitality',\n",
        "    'Other Services (except Public Administration)': 'Other Services'\n",
        "}\n",
        "df_grouped['Industry'] = df_grouped['NAICS2_NAME'].map(short_names).fillna(df_grouped['NAICS2_NAME'])\n",
        "df_grouped['Job_Type'] = df_grouped['DATA_ANALYST_JOB'].map({True:'True', False:'False'})\n",
        "\n",
        "pivot = (\n",
        "    df_grouped\n",
        "    .pivot_table(index='Industry', columns='Job_Type', values='Job_Count', fill_value=0)\n",
        "    .reset_index()\n",
        ")\n",
        "industries = pivot['Industry'].tolist()\n",
        "y_true  = pivot['True'].tolist()\n",
        "y_false = pivot['False'].tolist()\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# 2) Build a 2-row subplot: bar on top, table below\n",
        "# -----------------------------------------------------------------------------\n",
        "fig = make_subplots(\n",
        "    rows=2, cols=1,\n",
        "    row_heights=[0.70, 0.30],           # give a bit more room to the table\n",
        "    specs=[[{\"type\":\"bar\"}],[{\"type\":\"table\"}]],\n",
        "    vertical_spacing=0.12              # more space between bar and table\n",
        ")\n",
        "\n",
        "colors = {'True': '#FFE5E5', 'False': '#FF6B6B'}\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Bar(\n",
        "        x=industries, y=y_true, name='True',\n",
        "        marker=dict(color=colors['True'], line=dict(color='#A81D1D', width=1)),\n",
        "        text=y_true, textposition='outside'\n",
        "    ),\n",
        "    row=1, col=1\n",
        ")\n",
        "fig.add_trace(\n",
        "    go.Bar(\n",
        "        x=industries, y=y_false, name='False',\n",
        "        marker=dict(color=colors['False'], line=dict(color='#A81D1D', width=1)),\n",
        "        text=y_false, textposition='outside'\n",
        "    ),\n",
        "    row=1, col=1\n",
        ")\n",
        "\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# 3) Slider steps: 0 → 8 000 in 200s\n",
        "# -----------------------------------------------------------------------------\n",
        "steps = []\n",
        "for val in range(0, 8001, 200):\n",
        "    steps.append(dict(\n",
        "        label=str(val),\n",
        "        method=\"update\",\n",
        "        args=[\n",
        "            {\"y\": [\n",
        "                [v if v>=val else 0 for v in y_true],\n",
        "                [v if v>=val else 0 for v in y_false]\n",
        "            ]},\n",
        "            {\"title\": f\"Min Jobs ≥ {val:,}\"}\n",
        "        ]\n",
        "    ))\n",
        "\n",
        "# -----------------------------------------------------------------------------\n",
        "# 4) Final layout tweaks\n",
        "# -----------------------------------------------------------------------------\n",
        "fig.update_layout(\n",
        "    # lift slider above everything\n",
        "    sliders=[dict(\n",
        "        active=0,\n",
        "        currentvalue={\"prefix\":\"Min Jobs: \"},\n",
        "        pad={\"b\":0},\n",
        "        x=0.05,\n",
        "        y=1.05,                # move slider way above the plot area\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"bottom\",\n",
        "        len=0.7,\n",
        "        font=dict(color='#A81D1D'),\n",
        "        steps=steps\n",
        "    )],\n",
        "\n",
        "    title=dict(\n",
        "        text=\"Data & Business Analytics Job Trends\",\n",
        "        font=dict(size=24, color='#A81D1D'),\n",
        "        x=0.5,\n",
        "        y=0.95,                # drop the title just below the slider\n",
        "        xanchor=\"center\",\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "\n",
        "    width=1100, height=850,\n",
        "    margin=dict(l=60, r=60, t=180, b=200),  # extra top & bottom margin\n",
        "\n",
        "    plot_bgcolor='white',\n",
        "    paper_bgcolor='white',\n",
        "\n",
        "    xaxis=dict(\n",
        "        title=\"Industry\",\n",
        "        title_font=dict(size=16, color='#A81D1D'),\n",
        "        tickmode='array',\n",
        "        tickvals=list(range(len(industries))),\n",
        "        ticktext=industries,\n",
        "        tickangle=-30,\n",
        "        tickfont=dict(size=11, color='#333'),\n",
        "        showline=True, linecolor='#A81D1D'\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Number of Jobs\",\n",
        "        title_font=dict(size=16, color='#A81D1D'),\n",
        "        tickfont=dict(size=11, color='#333'),\n",
        "        gridcolor='rgba(200,200,200,0.3)',\n",
        "        showline=True, linecolor='#A81D1D',\n",
        "        range=[0, max(max(y_true),max(y_false))*1.2]\n",
        "    ),\n",
        "\n",
        "    legend=dict(\n",
        "        title=\"Data Analyst Job\",\n",
        "        title_font=dict(color='#A81D1D'),\n",
        "        font=dict(size=12),\n",
        "        x=0.95, y=0.95\n",
        "    ),\n",
        "\n",
        "    bargap=0.2\n",
        ")\n",
        "\n",
        "fig"
      ],
      "id": "ea47336d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"plotly-wrapper\"> ```{python} fig``` </div> ```\n"
      ],
      "id": "3fc35e73"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "# Prepare the data\n",
        "df = eda.copy()\n",
        "\n",
        "# Define analytics jobs (Data Analyst + Business Analyst)\n",
        "def classify_analytics_job(row):\n",
        "    if row['DATA_ANALYST_JOB']:\n",
        "        return True\n",
        "    title = str(row['TITLE_NAME']).lower() if 'TITLE_NAME' in row else str(row['TITLE']).lower()\n",
        "    if 'business analyst' in title:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "df['IS_ANALYTICS_JOB'] = df.apply(classify_analytics_job, axis=1)\n",
        "df['Job_Category'] = df['IS_ANALYTICS_JOB'].map({True: 'Analytics Job', False: 'Non-Analytics Job'})\n",
        "\n",
        "# Create the box plot\n",
        "fig = px.box(df, \n",
        "             x='REMOTE_TYPE_NAME', \n",
        "             y='SALARY', \n",
        "             color='Job_Category',\n",
        "             title='Salary Distribution by Remote Type for Analytics vs Non-Analytics Jobs',\n",
        "             labels={'REMOTE_TYPE_NAME': 'Remote Type', 'SALARY': 'Salary ($)', 'Job_Category': 'Job Category'},\n",
        "             color_discrete_map={'Analytics Job': '#FF6B6B', 'Non-Analytics Job': '#4ECDC4'})\n",
        "\n",
        "# Beautify the layout with a red-white theme (no gradients)\n",
        "fig.update_layout(\n",
        "    width=900,\n",
        "    height=600,\n",
        "    plot_bgcolor='#FFFFFF',  # Plain white background\n",
        "    paper_bgcolor='#FFFFFF',  # Plain white background\n",
        "    font=dict(family=\"Inter, sans-serif\", size=14, color=\"#2D3748\"),\n",
        "    title=dict(\n",
        "        font=dict(size=24, color=\"#FF6B6B\"),  # Red title for theme\n",
        "        x=0.5,\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"Remote Type\",\n",
        "        title_font=dict(size=16),\n",
        "        tickfont=dict(size=12),\n",
        "        gridcolor=\"#E2E8F0\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Salary ($)\",\n",
        "        title_font=dict(size=16),\n",
        "        tickfont=dict(size=12),\n",
        "        gridcolor=\"#E2E8F0\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True,\n",
        "        showgrid=True,\n",
        "        zeroline=False\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"Job Category\",\n",
        "        font=dict(size=13),\n",
        "        bgcolor=\"#FFFFFF\",\n",
        "        bordercolor=\"#FF6B6B\",  # Red border for theme\n",
        "        borderwidth=1,\n",
        "        x=1.02,\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "    hovermode=\"closest\",\n",
        "    hoverlabel=dict(\n",
        "        bgcolor=\"#FFFFFF\",\n",
        "        font_size=12,\n",
        "        font_family=\"Inter, sans-serif\",\n",
        "        font_color=\"#2D3748\",\n",
        "        bordercolor=\"#FF6B6B\"  # Red border for hover\n",
        "    )\n",
        ")\n",
        "\n",
        "fig"
      ],
      "id": "7d33e888",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"plotly-wrapper\"> ```{python} fig``` </div> ```\n"
      ],
      "id": "e1b5f58b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "# Prepare the data\n",
        "df = eda.copy()\n",
        "\n",
        "# Define analytics jobs (Data Analyst + Business Analyst)\n",
        "def classify_analytics_job(row):\n",
        "    if row['DATA_ANALYST_JOB']:\n",
        "        return True\n",
        "    title = str(row['TITLE_NAME']).lower() if 'TITLE_NAME' in row else str(row['TITLE']).lower()\n",
        "    if 'business analyst' in title:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "df['IS_ANALYTICS_JOB'] = df.apply(classify_analytics_job, axis=1)\n",
        "df['Job_Category'] = df['IS_ANALYTICS_JOB'].map({True: 'Analytics Job', False: 'Non-Analytics Job'})\n",
        "\n",
        "# Group by industry and job category\n",
        "df_grouped = df.groupby(['NAICS2_NAME', 'IS_ANALYTICS_JOB']).size().reset_index(name='Job_Count')\n",
        "df_grouped['Job_Category'] = df_grouped['IS_ANALYTICS_JOB'].map({True: 'Analytics Job', False: 'Non-Analytics Job'})\n",
        "\n",
        "# Shorten industry names for better readability\n",
        "short_map = {\n",
        "    'Professional, Scientific, and Technical Services': 'Prof. Services',\n",
        "    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n",
        "    'Health Care and Social Assistance': 'Healthcare',\n",
        "    'Finance and Insurance': 'Finance',\n",
        "    'Information': 'Info Tech',\n",
        "    'Educational Services': 'Education',\n",
        "    'Manufacturing': 'Manufacturing',\n",
        "    'Retail Trade': 'Retail',\n",
        "    'Accommodation and Food Services': 'Hospitality',\n",
        "    'Other Services (except Public Administration)': 'Other Services'\n",
        "}\n",
        "df_grouped['Industry'] = df_grouped['NAICS2_NAME'].map(short_map).fillna(df_grouped['NAICS2_NAME'])\n",
        "\n",
        "# Create the stacked bar chart\n",
        "fig = px.bar(df_grouped, \n",
        "             x='Industry', \n",
        "             y='Job_Count', \n",
        "             color='Job_Category',\n",
        "             title='Top Industries Hiring Analytics Jobs',\n",
        "             labels={'Industry': 'Industry', 'Job_Count': 'Number of Jobs', 'Job_Category': 'Job Category'},\n",
        "             barmode='stack',\n",
        "             color_discrete_map={'Analytics Job': '#FF6B6B', 'Non-Analytics Job': '#4ECDC4'})\n",
        "\n",
        "# Beautify the layout with a red-white theme (no gradients)\n",
        "fig.update_layout(\n",
        "    width=1000,\n",
        "    height=600,\n",
        "    plot_bgcolor='#FFFFFF',  # Plain white background\n",
        "    paper_bgcolor='#FFFFFF',  # Plain white background\n",
        "    font=dict(family=\"Inter, sans-serif\", size=14, color=\"#2D3748\"),\n",
        "    title=dict(\n",
        "        font=dict(size=24, color=\"#FF6B6B\"),  # Red title for theme\n",
        "        x=0.5,\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"Industry\",\n",
        "        title_font=dict(size=16),\n",
        "        tickfont=dict(size=12),\n",
        "        tickangle=-45,\n",
        "        gridcolor=\"#E2E8F0\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Number of Jobs\",\n",
        "        title_font=dict(size=16),\n",
        "        tickfont=dict(size=12),\n",
        "        gridcolor=\"#E2E8F0\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True,\n",
        "        showgrid=True,\n",
        "        zeroline=False\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"Job Category\",\n",
        "        font=dict(size=13),\n",
        "        bgcolor=\"#FFFFFF\",\n",
        "        bordercolor=\"#FF6B6B\",  # Red border for theme\n",
        "        borderwidth=1,\n",
        "        x=1.02,\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "    hovermode=\"closest\",\n",
        "    hoverlabel=dict(\n",
        "        bgcolor=\"#FFFFFF\",\n",
        "        font_size=12,\n",
        "        font_family=\"Inter, sans-serif\",\n",
        "        font_color=\"#2D3748\",\n",
        "        bordercolor=\"#FF6B6B\"  # Red border for hover\n",
        "    )\n",
        ")\n",
        "fig"
      ],
      "id": "8ded4892",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"plotly-wrapper\"> ```{python} fig``` </div> ```\n"
      ],
      "id": "1fe11e05"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "# Prepare the data\n",
        "df = eda.copy()\n",
        "\n",
        "# Define analytics jobs (Data Analyst + Business Analyst)\n",
        "def classify_analytics_job(row):\n",
        "    if row['DATA_ANALYST_JOB']:\n",
        "        return True\n",
        "    title = str(row['TITLE_NAME']).lower() if 'TITLE_NAME' in row else str(row['TITLE']).lower()\n",
        "    if 'business analyst' in title:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "df['IS_ANALYTICS_JOB'] = df.apply(classify_analytics_job, axis=1)\n",
        "df['Job_Category'] = df['IS_ANALYTICS_JOB'].map({True: 'Analytics Job', False: 'Non-Analytics Job'})\n",
        "\n",
        "# Calculate average years of experience\n",
        "df['Avg_Years_Experience'] = (df['MIN_YEARS_EXPERIENCE'] + df['MAX_YEARS_EXPERIENCE']) / 2\n",
        "\n",
        "# Clean the data (remove rows with missing salary or experience)\n",
        "df = df.dropna(subset=['Avg_Years_Experience', 'SALARY'])\n",
        "\n",
        "# Create the scatter plot with trend line\n",
        "fig = px.scatter(df, \n",
        "                 x='Avg_Years_Experience', \n",
        "                 y='SALARY', \n",
        "                 color='Job_Category',\n",
        "                 trendline='ols',  # Add trend line (ordinary least squares)\n",
        "                 title='Experience Requirements vs Salary for Analytics Jobs',\n",
        "                 labels={'Avg_Years_Experience': 'Average Years of Experience', 'SALARY': 'Salary ($)', 'Job_Category': 'Job Category'},\n",
        "                 color_discrete_map={'Analytics Job': '#FF6B6B', 'Non-Analytics Job': '#4ECDC4'})\n",
        "\n",
        "# Beautify the layout with a red-white theme (no gradients)\n",
        "fig.update_layout(\n",
        "    width=900,\n",
        "    height=600,\n",
        "    plot_bgcolor='#FFFFFF',  # Plain white background\n",
        "    paper_bgcolor='#FFFFFF',  # Plain white background\n",
        "    font=dict(family=\"Inter, sans-serif\", size=14, color=\"#2D3748\"),\n",
        "    title=dict(\n",
        "        font=dict(size=24, color=\"#FF6B6B\"),  # Red title for theme\n",
        "        x=0.5,\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "    xaxis=dict(\n",
        "        title=\"Average Years of Experience\",\n",
        "        title_font=dict(size=16),\n",
        "        tickfont=dict(size=12),\n",
        "        gridcolor=\"#E2E8F0\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True,\n",
        "        showgrid=True,\n",
        "        zeroline=False\n",
        "    ),\n",
        "    yaxis=dict(\n",
        "        title=\"Salary ($)\",\n",
        "        title_font=dict(size=16),\n",
        "        tickfont=dict(size=12),\n",
        "        gridcolor=\"#E2E8F0\",\n",
        "        linecolor=\"#2D3748\",\n",
        "        linewidth=2,\n",
        "        showline=True,\n",
        "        showgrid=True,\n",
        "        zeroline=False\n",
        "    ),\n",
        "    legend=dict(\n",
        "        title=\"Job Category\",\n",
        "        font=dict(size=13),\n",
        "        bgcolor=\"#FFFFFF\",\n",
        "        bordercolor=\"#FF6B6B\",  # Red border for theme\n",
        "        borderwidth=1,\n",
        "        x=1.02,\n",
        "        y=0.5,\n",
        "        xanchor=\"left\",\n",
        "        yanchor=\"middle\"\n",
        "    ),\n",
        "    hovermode=\"closest\",\n",
        "    hoverlabel=dict(\n",
        "        bgcolor=\"#FFFFFF\",\n",
        "        font_size=12,\n",
        "        font_family=\"Inter, sans-serif\",\n",
        "        font_color=\"#2D3748\",\n",
        "        bordercolor=\"#FF6B6B\"  # Red border for hover\n",
        "    )\n",
        ")\n",
        "\n",
        "# Customize scatter points\n",
        "fig.update_traces(\n",
        "    marker=dict(\n",
        "        size=8,\n",
        "        opacity=0.7,\n",
        "        line=dict(width=1, color=\"#2D3748\")\n",
        "    )\n",
        ")\n",
        "fig"
      ],
      "id": "26110e9f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"plotly-wrapper\"> ```{python} fig``` </div> ```\n"
      ],
      "id": "bba89f27"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "import pandas as pd\n",
        "\n",
        "# Prepare the data\n",
        "df = eda.copy()\n",
        "\n",
        "# Define analytics jobs (Data Analyst + Business Analyst)\n",
        "def classify_analytics_job(row):\n",
        "    if row['DATA_ANALYST_JOB']:\n",
        "        return True\n",
        "    title = str(row['TITLE_NAME']).lower() if 'TITLE_NAME' in row else str(row['TITLE']).lower()\n",
        "    if 'business analyst' in title:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "df['IS_ANALYTICS_JOB'] = df.apply(classify_analytics_job, axis=1)\n",
        "df['Job_Category'] = df['IS_ANALYTICS_JOB'].map({True: 'Analytics Job', False: 'Non-Analytics Job'})\n",
        "\n",
        "# Filter for Analytics jobs only\n",
        "df_analytics = df[df['IS_ANALYTICS_JOB']].copy()\n",
        "\n",
        "# Clean the data (remove rows with missing industry)\n",
        "df_analytics = df_analytics.dropna(subset=['NAICS2_NAME'])\n",
        "\n",
        "# Group by job category and industry to get job counts\n",
        "df_grouped = df_analytics.groupby(['Job_Category', 'NAICS2_NAME']).size().reset_index(name='Job_Count')\n",
        "\n",
        "# Shorten industry names for better readability\n",
        "short_map = {\n",
        "    'Professional, Scientific, and Technical Services': 'Prof. Services',\n",
        "    'Administrative and Support and Waste Management and Remediation Services': 'Admin & Waste Mgmt',\n",
        "    'Health Care and Social Assistance': 'Healthcare',\n",
        "    'Finance and Insurance': 'Finance',\n",
        "    'Information': 'Info Tech',\n",
        "    'Educational Services': 'Education',\n",
        "    'Manufacturing': 'Manufacturing',\n",
        "    'Retail Trade': 'Retail',\n",
        "    'Accommodation and Food Services': 'Hospitality',\n",
        "    'Other Services (except Public Administration)': 'Other Services'\n",
        "}\n",
        "df_grouped['NAICS2_NAME'] = df_grouped['NAICS2_NAME'].map(short_map).fillna(df_grouped['NAICS2_NAME'])\n",
        "\n",
        "# Prepare data for Sankey Diagram\n",
        "# Create a list of unique labels (nodes)\n",
        "labels = list(df_grouped['Job_Category'].unique()) + list(df_grouped['NAICS2_NAME'].unique())\n",
        "\n",
        "# Create source and target indices\n",
        "source = [labels.index(job_cat) for job_cat in df_grouped['Job_Category']]\n",
        "target = [labels.index(industry) for industry in df_grouped['NAICS2_NAME']]\n",
        "value = df_grouped['Job_Count'].tolist()\n",
        "\n",
        "# Create the Sankey Diagram\n",
        "fig = go.Figure(data=[go.Sankey(\n",
        "    node=dict(\n",
        "        pad=15,\n",
        "        thickness=20,\n",
        "        line=dict(color=\"#2D3748\", width=0.5),\n",
        "        label=labels,\n",
        "        color=\"#FF6B6B\"  # Red nodes for the theme\n",
        "    ),\n",
        "    link=dict(\n",
        "        source=source,\n",
        "        target=target,\n",
        "        value=value,\n",
        "        color=\"rgba(255, 107, 107, 0.5)\"  # Semi-transparent red links\n",
        "    )\n",
        ")])\n",
        "\n",
        "# Beautify the layout with a red-white theme (no gradients)\n",
        "fig.update_layout(\n",
        "    width=900,\n",
        "    height=600,\n",
        "    plot_bgcolor='#FFFFFF',  # Plain white background\n",
        "    paper_bgcolor='#FFFFFF',  # Plain white background\n",
        "    font=dict(family=\"Inter, sans-serif\", size=14, color=\"#2D3748\"),\n",
        "    title=dict(\n",
        "        text='Distribution of Analytics Job Postings by Industry',\n",
        "        font=dict(size=24, color=\"#FF6B6B\"),  # Red title for theme\n",
        "        x=0.5,\n",
        "        xanchor=\"center\",\n",
        "        y=0.95,\n",
        "        yanchor=\"top\"\n",
        "    ),\n",
        "    margin=dict(l=20, r=20, t=80, b=20),\n",
        ")\n",
        "fig"
      ],
      "id": "c3a2189e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<div class=\"plotly-wrapper\"> ```{python} fig``` </div> ```\n"
      ],
      "id": "bdcc3d5b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}